# Data wrangling I {#sec-wrangling}

## Intended Learning Outcomes {.unnumbered}

In the next two chapters, we will build on the data wrangling skills from level 1. We will revisit all the functions you have already encountered (and might have forgotten over the summer break) and introduce 2 or 3 new functions. These two chapters will provide an opportunity to revise and apply the functions to a novel dataset.

By the end of this chapter, you should be able to:

-   apply familiar data wrangling functions to novel datasets
-   read and interpret error messages
-   realise there are several ways of getting to the results 
-   export data objects as csv files


The main purpose of this chapter and @sec-wrangling2 is to wrangle your data into shape for data visualisation (@sec-dataviz and @sec-dataviz2). For the two chapters, we will: 

1. calculate demographics
2. tidy 3 different questionnaires with varying degrees of complexity
3. solve an error mode problem
4. join all data objects together

## [Individual Walkthrough]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}

Before we start, we need to set up some things.

## Activity 1: Setup

* We will be working on the **dataset by Pownall et al. (2023)** again, which means we can still use the project we created last week. The data files will already be there, so no need to download them again.
* To **open the project** in RStudio, go to the folder in which you stored the project and the data last time, and double click on the project icon.
* **Create a new `.Rmd`** for chapter 2 and save it to your project folder. Name it something meaningful (e.g., ‚Äúchapter_02‚Äù, ‚Äú02_data_wrangling.Rmd‚Äù). See @sec-rmd if you need some guidance.
* In your newly created `.Rmd` file, delete everything below line 12 (after the set-up code chunk).


## Activity 2: Load in the libraries and read in the data

We will use `tidyverse` today, and we want to create a data object `data_prp` that stores the data from the file `prp_data_reduced.csv`.

::: {.callout-note collapse="true" icon="false"}

## Hint

```{r eval=FALSE}
library(???)
data_prp <- read_csv("???")
```

```{r include=FALSE, message=TRUE}
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
```

:::


::: {.callout-caution collapse="true" icon="false"} 

## Solution 

```{r eval=FALSE}
library(tidyverse)
data_prp <- read_csv("prp_data_reduced.csv")
```

:::

If you need a quick reminder what the dataset was about, have a look at the abstract in @sec-download_data_ch1. We also addressed the changes we made to the dataset there.

And remember to have a quick `glimpse()` at your data. 



## Activity 3: Calculating demographics 


Let‚Äôs start with some simple data wrangling steps to compute demographics for our original dataset, `data_prp`. First, we want to determine how many participants took part in the study by Pownall et al. (2023) and compute the mean age and the standard deviation of age for the sample.

### ... for the full sample using `summarise()`

The `summarise()` function is part of the **"Wickham 6"** alongside `group_by()`, `select()`, `filter()`, `mutate()`, and `arrange()`. You used them plenty of times last year.

Within `summarise()`, we can use the `n()` function, which calculates the number of rows in the dataset. Since each row corresponds to a unique participant, this gives us the total number of participants.

To calculate the mean age and the standard deviation of age, we need to use the functions `mean()` and `sd()` on the column `Age` respectively.

```{r, error=TRUE}
demo_total <- data_prp %>% 
  summarise(n = n(), # participant number
            mean_age = mean(Age), # mean age
            sd_age = sd(Age)) # standard deviation of age

demo_total
```

R did not give us an error message per se, but the output is not quite as expected either. There are `NA` values in the `mean_age` and `sd_age` columns. Looking at the warning message and at `Age`, can you explain what happened?

::: {.callout-caution collapse="true" icon="false"} 

## Answer

The warning message says: `argument is not numeric or logical: returning NA` If we look at the `Age` column more closely, we can see that it's a character data type.

:::

#### Fixing `Age` {.unnumbered}

Might be wise to look at the unique answers in column `Age` to determine what is wrong. We can do that with the function `distinct()`.

```{r results='hide'}
age_distinct <- data_prp %>% 
  distinct(Age)

age_distinct
```


::: {.callout-caution collapse="true" icon="false"}

## Show the unique values of `Age`.

```{r echo=FALSE}
age_distinct
```

:::

::: {.columns}

::: {.column}

One cell has the string "years" added to their number 25, which has converted the entire column into a character column. 

We can easily fix this by extracting only the numbers from the column and converting it into a numeric data type. The `parse_number()` function, which is part of the `tidyverse` package, handles both steps in one go (so there‚Äôs no need to load additional packages).

We will combine this with the `mutate()` function to create a new column called `Age` (containing those numeric values), effectively replacing the old `Age` column (which had the character values).

:::


::: {.column}

![parse_number() illustration by Allison Horst (see [https://allisonhorst.com/r-packages-functions](https://allisonhorst.com/r-packages-functions){target="_blank"})](images/parse_number.png){width="95%"}

:::

:::

```{r}
data_prp <- data_prp %>% 
  mutate(Age = parse_number(Age))

typeof(data_prp$Age) # fixed
```
#### Computing summary stats {.unnumbered}

Excellent. Now that the numbers are in a numeric format, let's try calculating the demographics for the total sample again.


```{r}
demo_total <- data_prp %>% 
  summarise(n = n(), # participant number
            mean_age = mean(Age), # mean age
            sd_age = sd(Age)) # standard deviation of age

demo_total
```

Even though there's no error or warning, the table still shows `NA` values for `mean_age` and `sd_age`. So, what could possibly be wrong now?

::: {.callout-caution collapse="true" icon="false"} 

## Answer

Did you notice that the `Age` column in `age_distinct` contains some missing values (`NA`)? To be honest, it's easier to spot this issue in the actual R output than in the printed HTML page.

:::


#### Computing summary stats - third attempt {.unnumbered}

To ensure R ignores missing values during calculations, we need to add the extra argument `na.rm = TRUE` to the `mean()` and `sd()` functions.

```{r}
demo_total <- data_prp %>% 
  summarise(n = n(), # participant number
            mean_age = mean(Age, na.rm = TRUE), # mean age
            sd_age = sd(Age, na.rm = TRUE)) # standard deviation of age

demo_total
```

Finally, we‚Äôve got it! ü•≥ Third time's the charm!


### ... per gender using `summarise()` and `group_by()`

Now we want to compute the summary statistics for each gender. The code inside the `summarise()` function remains unchanged; we just need to use the `group_by()` function beforehand to tell R that we want to compute the summary statistics for each group separately. It‚Äôs also a good practice to use `ungroup()` afterwards, so you are not taking groupings forward unintentionally.

```{r}
demo_by_gender <- data_prp %>% 
  group_by(Gender) %>% # split data up into groups (here Gender)
  summarise(n = n(), # participant number 
            mean_age = mean(Age, na.rm = TRUE), # mean age 
            sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
  ungroup()

demo_by_gender
```


### Adding percentages 

Sometimes, it may be useful to calculate percentages, such as for the gender split. You can do this by adding a line within the `summarise()` function to perform the calculation. All we need to do is take the number of female, male, and non-binary participants (stored in the `n` column of `demo_by_gender`), divide it by the total number of participants (stored in the `n` column of `demo_total`), and multiply by 100. Let's add `percentage` to the `summarise()` function of `demo_by_gender`. Make sure that the code for `percentages` is placed after the value for `n` has been computed. 

Accessing the value of `n` for the different gender categories is straightforward because we can refer back to it directly. However, since the total number of participants is stored in a different data object, we need to use a base R function to access it ‚Äì specifically the `$` operator. To do this, you simply type the name of the data object (in this case, `demo_total`), followed by the `$` symbol (with no spaces), and then the name of the column you want to retrieve (in this case, `n`). The general pattern is `data$column`.
```{r}
demo_by_gender <- data_prp %>% 
  group_by(Gender) %>% 
  summarise(n = n(), 
            # n from the line above divided by n from demo_total *100
            percentage = n/demo_total$n *100, 
            mean_age = mean(Age, na.rm = TRUE), 
            sd_age = sd(Age, na.rm = TRUE)) %>% 
  ungroup()

demo_by_gender
```

::: {.callout-tip collapse="true"}

## Tip for decimal places - use `round()`

Not super important, because you could round the values by yourself when writing up your reports, but if you wanted to tidy up the decimal places in the output, you can do that using the `round()` function. You would need to "wrap" it around your computations and specify how many decimal places you want to display (for example `mean(Age)` would turn into `round(mean(Age), 1)`). It may look odd for `percentage`, just make sure the number that specifies the decimal places is placed **within** the round function. The default value is 0 (meaning no decimal spaces).

```{r}
demo_by_gender <- data_prp %>% 
  group_by(Gender) %>% 
  summarise(n = n(), 
            percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
            mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
            sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
  ungroup()

demo_by_gender
```

:::


## Activity 4: Questionable Research Practices (QRPs) {#sec-ch2_act4}

#### The main goal is to compute the mean QRP score per participant for time point 1. {.unnumbered}

Looking at the QRP data at time point 1, you determine that

* individual item columns are `r mcq(c(answer = "numeric", x = "character"))`, and 
* according to the codebook, there are `r mcq(c(answer = "no", x = "some"))` reverse-coded items in this questionnaire. 

So, we just have to **compute an average score for items 1 to 11** as items 12 to 15 are distractor items. Seems quite straightforward.

The downside is that individual items are each in a separate column, i.e., in **wide format**, and everything would be easier if the items were arranged in **long format**.

Let's tackle this problem in steps. Best would be to create a separate data object for that. If we wanted to compute this within `data_prp`, it would turn into a nightmare.

* **Step 1**: select the relevant columns `Code`, and `QRPs_1_Time1` to `QRPs_1_Time1` and store them in an object called `qrp_t1`
* **Step 2**: pivot the data from wide format to long format using `pivot_longer()` so we can calculate the average score more easily (in step 3)
* **Step 3**: calculate the average QRP score (`QRPs_Acceptance_Time1_mean`) per participant using `group_by()` and `summarise()`

```{r qrps}
qrp_t1 <- data_prp %>% 
  #Step 1
  select(Code, QRPs_1_Time1:QRPs_11_Time1) %>%
  # Step 2
  pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores") %>% 
  # Step 3
  group_by(Code) %>% # grouping py participant id
  summarise(QRPs_Acceptance_Time1_mean = mean(Scores)) %>% # calculating the average Score
  ungroup() # just make it a habit
```


::: {.callout-caution icon="false" collapse="true"} 

## Explain the individual functions

::: {.panel-tabset}
## `select ()`

The select function allows to include or exclude certain variables (columns). Here we want to focus on the participant ID column (i.e., `Code`) and the QRP items at time point 1. We can either list them all individually, i.e., Code, QRPs_1_Time1, QRPs_2_Time1, QRPs_3_Time1, and so forth (you get the gist), but that would take forever to type. 

A shortcut is to use the colon operator `:`. It allows us to select all columns that fall within the range of `first_column_name` to `last_column_name`. We can apply this here since the QRP items (1 to 11) are sequentially listed in `data_prp`.

```{r}
qrp_step1 <- data_prp %>% 
  select(Code, QRPs_1_Time1:QRPs_11_Time1)

# show first 5 rows of qrp_step1
head(qrp_step1, n = 5)
```

How many rows/observations and columns/variables do we have in `qrp_step1`?

* rows/observations: `r fitb("89")`
* columns/variables: `r fitb("12")`


## `pivot_longer()`

As you can see, the table we got from Step 1 is in wide format. To get it into wide format, we need to define:

* the columns that need to be reshuffled from wide into long format (`col` argument). Here we selected "everything except the `Code` column", as indicated by `-Code` [minus `Code`]. However, `QRPs_1_Time1:QRPs_11_Time1` would also work and give you the exact same result.
* the `names_to` argument. R is creating a new column in which all the column names from the columns you selected in `col` will be stored in. Here we are naming this column "Items" but you could pick something equally sensible if you like.
* the `values_to` argument. R creates this second column to store all responses the participants gave to the individual questions, i.e., all the numbers in this case. We named it "Scores" here, but you could have called it something different, like "Responses"


```{r}
qrp_step2 <- qrp_step1 %>% 
  pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores")

# show first 15 rows of qrp_step2
head(qrp_step2, n = 15)
```

Now, have a look at `qrp_step2`. In total, we now have `r fitb("979")` rows/observations, `r fitb("11")` per participant, and `r fitb("3")` columns/variables.


## `group_by()` and `summarise()`

This follows exactly the same sequence we used when calculating descriptive statistics by gender. The only difference is that we are now grouping the data by the participant's `Code` instead of `Gender`.

`summarise()` works exactly the same way: 
`summarise(new_column_name = function_to_calculate_something(column_name_of_numeric_values))`

The `function_to_calculate_something` can be `mean()`, `sd()` or `sum()` for mean scores, standard deviations, or summed-up scores respectively. You could also use `min()` or `max()` if you wanted to determine the lowest or the highest score for each participant.

:::

:::





## Activity 5: Knitting

Once you've completed your R Markdown file, the final step is to "knit" it, which converts the `.Rmd` file into a HTML file. Knitting combines your code, text, and output (like tables and plots) into a single cohesive document. This is a really good way to check your code is working.

To knit the file, **click the Knit button** at the top of your RStudio window. The document will be generated and, depending on your setting, automatically opened in the viewer in the `Output pane` or an external browser window.

If any errors occur during knitting, RStudio will show you an error message with details to help you troubleshoot.

If you want to **intentionally keep any errors** we tackled today to keep a reference on how you solved them, you could add `error=TRUE` or `eval=FALSE` to the code chunk that isn't running.


## Activity 6: Export a data object as a csv

To avoid having to repeat the same steps in the next chapter, it's a good idea to save the data objects you've created today as csv files. You can do this by using the `write_csv()` function from the `readr` package. The csv files will appear in your project folder.

The basic syntax is:

```{r eval=FALSE}
write_csv(data_object, "filename.csv")
```


Now, let's export the objects `data_prp` and `qrp_t1`.

```{r eval=FALSE}
write_csv(data_prp, "data_prp_for_ch3.csv")
```

Here we named the file `data_prp_for_ch3.csv`, so we wouldn't override the original data csv file `prp_data_reduced.csv`. However, feel free to choose a name that makes sense to you.

::: {.callout-note icon="false"} 

## Your Turn

Export `qrp_t1`.

::: {.callout-caution collapse="true" icon="false"} 

## Solution

```{r eval=FALSE}
write_csv(qrp_t1, "qrp_t1.csv")
```


:::

:::


Check that your csv files have appeared in your project folder, and you're all set!

**That‚Äôs it for Chapter 2: Individual Walkthrough.**


## [Pair-coding in the lab]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}

## [Test your knowledge and challenge yourself]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}

