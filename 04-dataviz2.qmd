# Data viz II {#sec-dataviz2}

```{r include=FALSE}
library(tidyverse)
library(patchwork)
library(wesanderson)

# Layers
# https://intro2r.com/the-start-of-the-end.html
```

## Intended Learning Outcomes {.unnumbered}

By the end of this chapter you should be able to:

-   choose an appropriate plot for continuous variables and a mix of continuous/categorical variables 
-   create a basic version of an appropriate plot
-   apply extra layers to change the appearance of the plot

## [Individual Walkthrough]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}

In this chapter, we are continuing our journey of appropriate plots. Last week, we looked at which plots are appropriate for categorical variables. Today, we'll focus on continuous variables and which plots to choose with a mix of continuous and categorical variables.



## Activity 1: Set-up and data for today

-   We are still working with the data by Pownall et al. (2023) which we aggregated in @sec-wrangling. Open the project.
-   You could use the same Rmd as last week if you want to keep all plotting in one document or create a new Rmd to separate plots for categorical and continuous variables. Up to you.
-   The aggregated data is the same as last week. It should be in your project folder but in case it got lost, download it again and place it in your project folder: [data_prp_ch3.csv](data/data_prp_ch3.csv "download").
-   If you need a reminder about the data and variables, have a look at the codebook and/or @sec-download_data_ch1.



## Activity 2: Load in the libraries, read in the data, and tidy the dataframe

We need the package `tidyverse` today, and the data `data_prp_ch3.csv`.

```{r eval=FALSE}
## packages 
???

## data
data_prp_viz <- ???
```


::: {.callout-caution collapse="true" icon="false"}

## Solution

```{r eval=FALSE}
library(tidyverse)
data_prp_viz <- read_csv("data_prp_ch3.csv")
```

:::



```{r include=FALSE}
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path

library(tidyverse)
data_prp_viz <- read_csv("data/data_prp_ch3.csv")
```


This is the same as last week. We need to turn our categorical variables into factors to make plotting easier.

```{r}
data_prp_viz <- data_prp_viz %>% 
  mutate(Gender = factor(Gender,
                         levels = c(2, 1, 3),
                         labels = c("females", "males", "non-binary")),
         Secondyeargrade = factor(Secondyeargrade,
                                  levels = c(1, 2, 3, 4, 5),
                                  labels = c("≥ 70% (1st class grade)", "60-69% (2:1 grade)", "50-59% (2:2 grade)", "40-49% (3rd class)", "< 40%")),
         Plan_prereg = factor(Plan_prereg,
                              levels = c(1, 3, 2),
                              labels = c("Yes", "Unsure", "No")),
         Closely_follow = factor(Closely_follow,
                                 levels = c(2, 3),
                                 labels = c("Followed it somewhat", "Followed it exactly")),
         Research_exp = factor(Research_exp),
         Pre_reg_group = factor(Pre_reg_group))

```


::: {.callout-tip}

If you are working within the same Rmd file as last week, you can skip these initial steps but you have to run the code you had already placed at the start of last-week's Rmd file to load tidyverse into the library, read in the data, and convert some of the variables into factors.

:::


## Continuing with Appropriate plots {.unnumbered}

## One continuous variable

### Histogram `geom_histogram()`

If you wanted to show the distribution of a continuous variable, you can use a histogram. As with every plot, you need at least 3 layers to create a base version of the plot. Similar to `geom_bar()`, `geom_histogram()` only requires an `x` variable as it does the counting "in the background".

A histogram splits the data into “bins” (i.e., groupings displayed in a single bar). These values are plotted along the x-axis and shows the count of how many observations are in each bin along the y-axis. It's basically a bar chart for continuous variables.

Let's have a look at the age distribution in our dataset.

```{r fig-hist, fig.cap="Default histogram"}
ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram() 
```


The default **bin number** is 30 (as displayed in @fig-hist above). Changing the number of bins (argument `bins`) can help to show more or less fine tuning in the data. Bigger numbers of bins means more finetuning.

Perhaps it's more intuitive to modify the **width of each bin** instead via the argument (`binwidth`). So for example `binwidth = 1` for category age would mean 1 year of age per "age group"; `binwidth = 5` would mean 5 years of age span per "age group", etc. The plots below show modifications for both `bin` and `binwidth`.

```{r eval = FALSE, message = FALSE}
#less finetuning
ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram(bins = 10) 

# more fineturning
ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram(binwidth = 1) 
```

```{r fig-bins, fig.cap="Bins vs binwidth arguments", echo=FALSE}
bins_manipulation <- 
  ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram(bins = 10)


binwidth_manipulation <-
  ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram(binwidth = 1) 

# add plots together in 1 row
bins_manipulation + binwidth_manipulation + plot_layout(nrow = 1)
```

The **warning message** telling us 2 row of data were removed due to containing `non-finite values outside the scale range`. Have a look at the age column in `hp_data` to see if you can decipher the warning message.

They were removed because `r mcq(c(x = "they fall outside of the plot range", answer = "they contain missing values"))`.

Colours are getting manipulated slightly differently to the barchart. Click through each tab to see how you can alter colour, axes labels, margins and breaks, and add a different theme.

::: {.panel-tabset}

## Colour

We can change the plot colours by adding a **fill argument** and a **colour argument**. The `fill` argument manipulates the colour of the bars, and the `colour` argument changes the outline of the bars. Pay attention that they are **added directly to the `geom_histogram` arguments**, not the overall `aes()` like we did with the boxplot.

```{r warning=FALSE}
ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram(binwidth = 1, fill = "#586cfd", colour = "#FC58BE")
```

::: callout-tip

You could use 

* hex codes for fill and color, like we used here, `geom_histogram(binwidth = 1, fill = "#586cfd", colour = "#FC58BE")`. If you want create your own colours, check out [this website](https://www.hexcolortool.com/){target="_blank"}. OR
* a pre-defined colour name `geom_histogram(binwidth = 1, fill = "purple", colour = "green")`. See a full list [here](https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/){target="_blank"} OR


:::

## Axes labels, margins, and breaks

Here we **removed the label** for the y axes `Count` (to show you some variety) and **modified the breaks**. The y axis is now displayed in increasing steps of 5 (rather than 10), and the x axis has 1-year increments rather than 5. 

Notice how the `breaks =` argument manipulates the labels of the break ticks but not the limit of the scale. You can manipulate the limits of the scale with the `limits =` argument. To exaggerate, we set the limits to 15 and 50. See how the values for 15 to 19, and 44 to 50 do not have a label. You would need to adjust that in `breaks =` argument.

The `expansion()` function removes the gap between x axis and bars. It is exactly the same code as we used in @sec-dataviz .

```{r warning=FALSE}
ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram(binwidth = 1, fill = "#586cfd", colour = "#FC58BE") +
  labs(x = "Age (in years)", # renaming x axis label
       y = "") + # removing the y axis label
  scale_y_continuous(
    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)
    expand = expansion(mult = c(0, 0.05)),
    # changing break points on y axis
    breaks = seq(from = 0, to = 30, by = 5)
    ) +
  scale_x_continuous(
    # changing break points on x axis
    breaks = seq(from = 20, to = 43, by = 1),
    # Experimenting with
    limits = c(15, 50)
    )
  
```

## Themes

Let's experiment with the themes. For this plot we have chosen `theme_bw()`

```{r warning=FALSE}
ggplot(data_prp_viz, aes(x = Age)) +
  geom_histogram(binwidth = 1, fill = "#586cfd", colour = "#FC58BE") +
  labs(x = "Age (in years)", # renaming x axis label
       y = "") + # removing the y axis label
  scale_y_continuous(
    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)
    expand = expansion(mult = c(0, 0.05)),
    # changing break points on y axis
    breaks = seq(from = 0, to = 30, by = 5)
    ) +
  scale_x_continuous(
    # changing break points on x axis
    breaks = seq(from = 19, to = 44, by = 1)
    ) +
  # pick a theme
  theme_bw()
  
```
:::


## Two continuous variables

### Scatterplot `geom_point()`

We want to display the relationship between Acceptance of QRPs at Time point 1 and 2. The default scatterplot would be created with `geom_point()`.

We could also add a trendline by adding `geom_smooth()`. The default trendline is `loess`. If you want a linear trendline, you would need to add `method = lm` into `geom_smooth()` function.

```{r eval=FALSE}
ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +
  geom_point() +
  geom_smooth()

ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +
  geom_point() +
  geom_smooth(method = lm)
```


```{r fig-scatter, echo=FALSE, fig.cap="Default Scatterplot with added trendline - loess (left) and linear (right)"}
Scat_1 <- ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +
  geom_point() +
  geom_smooth()

scat_2 <- ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +
  geom_point() +
  geom_smooth(method = lm)

Scat_1 + scat_2 + plot_layout(nrow = 1)
```



Customising the colour of plot is slightly different to the other plots we've encountered so far. Technically, the point is not a "filled-in black area", but an extremely wide outline of a circle. Therefore, we cannot use the usual `fill` argument, but have to switch to the `colour` argument (like we did for the outline of the histogram).


::: {.panel-tabset}

## Colour for all points

If we want to **change the colour of all the points**, we would add the `colour` argument to the `geom_point() function`. Likewise, changing the **colour of the trendline** would also require a `colour` argument. Here we went with pre-defined colour names, but HEX codes would work too

```{r}
# colour of all points and the trendline
ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +
  geom_point(colour = 'magenta') +
  geom_smooth(method = lm, colour = 'turquoise')
```


## Colour with grouping

If we wanted the points to **change colour due to another grouping variable**, the colour argument would go into the `aes()` If you don't want to define the colours manually, use a colour palette like brewer (`scale_colour_brewer()`) or viridis (`scale_colour_viridis_d()`).

```{r}
## adding grouping variable Pre_reg_group and changing the colour values manually
ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +
  geom_point() +
  geom_smooth(method = lm) +
  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'))
```


## Legend title and labels

You can tidy the legend title and group labels via the `scale_colour_?` function


```{r}
ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +
  geom_point() +
  geom_smooth(method = lm) +
  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'),
                      name = "Pre-registered Dissertation",
                      labels = c("Yes", "No"))
```

:::

::: {.callout-note collapse="false" icon="false"} 

## Your Turn

All other layers would be exactly the same as in other plots. Try to add layers to the make the plot above prettier: 

1. relabel axes x and y
2. set the x and y axis range from 1 to 7
3. move the legend to a different position (either top, left, or bottom)
4. add a theme


::: {.callout-note collapse="true" icon="false"} 

## Hints

1. can be done in 2 different ways - labs() or scale_x_?
2. we did that for the histogram
3. We did that for the bar charts
4. pick a theme you like

:::



::: {.callout-caution collapse="true" icon="false"} 

## Solution

```{r}
ggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +
  geom_point() +
  geom_smooth(method = lm) +
  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'),
                      name = "Pre-registered Dissertation",
                      labels = c("Yes", "No")) +
  labs (x = "Acceptance of Questionable Research Practices (Time 1)", 
        y = "Acceptance of Questionable Research Practices (Time 2)") +
  theme_light() + # place before moving the legend position
  theme(legend.position = "top") # move legend to the top
  

```


:::

:::




## Continuous with categorical grouping variable

### Boxplot

We want to create a boxplot to investigate whether their understanding of open science depends on whether or not students had research experience. Our default boxplot would look like this:

```{r}
# default boxplot
ggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS)) +
  geom_boxplot()
```

Tada. As usual, we can make the plot pretty by adding various layers. Click on the tabs to see how


::: {.panel-tabset}

## Colour

We can change the colour by adding a fill argument in the `aes()`. If we want to modify these colours further, we would add a `scale_fill_?` layer If you have specific colours in mind, you would use `scale_fill_manual()` or if you want to stick with pre-defined ones, like brewer `scale_fill_brewer()`.

Btw, this is exactly the same code we used for the barcharts.

```{r}
ggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +
  geom_boxplot() +
  # customise colour
  scale_fill_brewer(palette = "Dark2")
```

## Axes labels

We need to relabel the axes labels for x and y with `scale_x_discrete()` and `scale_y_continuous()`. We can also tidy the labels for the groups and the breaks on the y-axis (in steps of 1 rather than 2) within the same functions

```{r}
ggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +
  geom_boxplot() +
  scale_fill_brewer(palette = "Dark2") +
  scale_x_discrete(
    # changing the label of x
    name = "Research Experience",
    # changing the group labels of the 2 groups
    labels = c("Yes", "No")) + 
  scale_y_continuous(
    # changing name of the y axis
    name = "Confidence in Understanding Open Science (Time 1)",
    # changing break labels
    breaks = c(seq(from = 1, to = 7, by = 1))
  )
  
```

## Legend and Theme

The legend is superfluous; best to take it off. As before, we can remove the legend by adding the argument `guide = "none"` into the `scale_fill` function.

Let's pick a theme we haven't used yet: `theme_dark()`

```{r}
ggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +
  geom_boxplot() +
  scale_fill_brewer(palette = "Dark2",
                    # removing the legend
                    guide = "none") +
  scale_x_discrete(
    name = "Research Experience",
    labels = c("Yes", "No")) + 
  scale_y_continuous(
    name = "Confidence in Understanding Open Science (Time 1)",
    breaks = c(seq(from = 1, to = 7, by = 1))
  ) +
  # pick a theme
  theme_dark()
  
```

:::




### Violin plot

We want to create a violin plot to investigate whether the perception of supervisor support depended on planning to pre-register the dissertation. Our default violin plot would look like this:

```{r}
# default boxplot
ggplot(data_prp_viz, aes(x = Plan_prereg, y = Mean_Supervisor_Support)) +
  geom_violin()
```

::: {.callout-note collapse="false" icon="false"} 

## Your Turn

Adjusting the violin plot would be exactly the same as the boxplot. Try to add layers to the base plot above to 

* [ ] change the colours either manually or using a pre-defined colour palette 
* [ ] tidy the axes labels and group names
* [ ] in case a legend appears, take it off
* [ ] add a theme


::: {.callout-caution collapse="true" icon="false"} 

## One possible Solution

```{r}
ggplot(data_prp_viz, aes(x = Plan_prereg, y = Mean_Supervisor_Support, fill = Plan_prereg)) +
  geom_violin() +
  scale_fill_manual(values = c('mediumspringgreen', 'orangered', 'slateblue'),
                    # removing the legend
                    guide = "none") +
  scale_x_discrete(name = "Plan to pre-register the dissertation") + 
  scale_y_continuous(
    name = "Perceived Supervisory Support",
    breaks = c(seq(from = 1, to = 7, by = 1))
  ) +
  # pick a theme
  theme_minimal()
```
:::

:::


### Violin-boxplots

So far, we've only added one `geom_` to our plots. Due to the layered system, we could add multiple geoms, for example, when creating a violin-boxplot. 

Remember, the order of the layers makes a difference sometimes. We've seen already, with themes we added at the very end that could override the argument for a legend position earlier. Here, `ggplot + violinplot + boxplot` looks different to `ggplot + boxplot + violinplot`.

Let's take the example of QRPs at timepoint 2 and a grouping variable of Second-year Grade.

```{r eval=FALSE}
ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +
  geom_violin() +
  geom_boxplot()


ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +
  geom_boxplot() +
  geom_violin()
```

```{r, fig-vb_bv, echo=FALSE, fig.cap="Default violin-boxplot: Order of the layer matters"}
vb <- ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +
  geom_violin() +
  geom_boxplot()


bv <- ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +
  geom_boxplot() +
  geom_violin()

vb + bv + plot_layout(nrow = 1)

```


Customising a few elements such as width of the boxes and the colour.


::: {.panel-tabset}

## Width of the boxes

If we want to get any information from the boxplot, we need to use order 1. But still, the boxplot is pretty wide and covers up important information from the violin. We could **adjust the width of the boxes** to make information more visible. This takes a bit of trial and error which width looks appropriate.

```{r, fig-vb_width, fig.cap="Default violin-boxplot: adjusting width of the box"}
ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +
  geom_violin() +
  geom_boxplot(width = 0.2)
```

## Colour

Adding colour should be pretty straight forward by now. This code is no different to the one we used in the boxplot or violin plot. We need to add the `fill` argument within the `aes()`, and a `scale_fill_?`layer.

However, we can modify this further by adding an opacity argument `alpha` to the violin plot geom.

```{r fig-vb_colour, fig.cap="Violin-boxplot with a different colour palette"}
ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +
  geom_violin(alpha = 0.4) + # alpha for opacity
  geom_boxplot(width = 0.2) + # change width of the boxes
  scale_fill_brewer(palette = "RdPu") # customise colour
```



## Your Turn

* Change the x- and y-axis labels
* Remove the legend
* add a theme

::: {.callout-caution collapse="true" icon="false"} 

## One possible Solution 

```{r}
ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +
  geom_violin(alpha = 0.4) +
  geom_boxplot(width = 0.2) +
  scale_fill_brewer(palette = "RdPu",
                    guide = "none") + # removes the legend
  # change labels of x and y
  labs (x = "Second-year Grade", y = "Acceptance of Questionable Research Practices (Time 2)") +
  theme_classic()
  
```
:::

:::


## Faceting - adding another grouping variable

Faceting is really useful when you have subsets in the data. We will use this here on the violin-boxplot from above, but you could add this to pretty much any plot. The function to split up the plots into facets is called `facet_wrap()`. 

Let's **add another grouping variable**, `Pre_reg_group`, so we can see separate plots for the yes and no groups. 

Since the group labels on the x-axis are quite long, we need to adjust them. Adding `guide = guide_axis(n.dodge = 2)` to the `scale_x_discrete()` function helps to display labels across multiple rows.


```{r fig-vb_pretty_facet, fig.cap="Pretty violin-boxplot split into pre-registration groups (yes and no)"}
ggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +
  geom_violin(alpha = 0.5) +
  geom_boxplot(width = 0.2) +
  scale_fill_brewer(palette = "RdPu",
                    guide = "none") + 
  labs (x = "Second-year Grade", y = "Acceptance of Questionable Research Practices (Time 2)") +
  theme_classic() +
  facet_wrap(~Pre_reg_group) + # faceting to split into subplots for yes and no
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) # want display labels in 2 rows

```

::: {.callout-tip}

The labels of `Pre_reg_group` are displayed as numbers 1 and 2. If this bugs you, fix the labels in the dataset. This would be less hassle than trying to fix it in the plot.

:::



::: {.callout-tip collapse="true" icon="false"}

## Special case: Variables with subscales

For example, we want to show the relationship between  SATs scores at timepoints 1 and 2, separately for all 4 subscales of the SATs questionnaires, we would need to wrangle the data first. The dataframe we need should look like this:

```{r include=FALSE}
data_facet <- data_prp_viz %>% 
  select(Code, starts_with("SATS")) %>% 
  pivot_longer(cols = starts_with("SATS"), names_to = "Variable", values_to = "Mean_Scores") %>% 
  separate(Variable, into = c(NA, "Subscale", "Timepoint", NA), sep = "_") %>% 
  pivot_wider(names_from = Timepoint, values_from = Mean_Scores)
```

```{r}
head(data_facet, n=5)
```

Try wrangling the data so that it looks like `data_facet` above

::: {.callout-note collapse="true" icon="false"}

## Hints

* step 1: select variables of interest
* step 2: pivot
* step 3: try to access information on subscales and timepoints from the variable names
* step 4: pivot in the other direction

::: {.callout-caution collapse="true" icon="false"}

## Solution

```{r}
data_facet <- data_prp_viz %>% 
  select(Code, starts_with("SATS")) %>% 
  pivot_longer(cols = starts_with("SATS"), names_to = "Variable", values_to = "Mean_Scores") %>% 
  separate(Variable, into = c(NA, "Subscale", "Timepoint", NA), sep = "_") %>% 
  pivot_wider(names_from = Timepoint, values_from = Mean_Scores)
```

:::

:::

Then we can build a scatterplot with facets for the subscales

```{r}
ggplot(data_facet, aes(x = Time1, y = Time2)) +
  geom_point() +
  facet_wrap(~Subscale)
```

:::




## [Pair-coding in the lab]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}

Provide a barchart, a violin-boxplot, and a scatterplot from the loneliness data and the students have to try and recreate one of those in the lab. If they are overly fast, they can do the other 2.







## [Test your knowledge on Chapters 3 and 4]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}

Which plot would you choose for




