{
  "hash": "0c2205cffa86f34cd76a5eb9a6f09706",
  "result": {
    "markdown": "# Paired t-test {#sec-within}\n\n## Intended Learning Outcomes {.unnumbered}\n\nBy the end of this chapter you should be able to:\n\n-   a\n-   b\n-   c\n\n\n\n\n\n## [Individual Walkthrough]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n## Activity 1: Setup\n\nWe will still be working with the dataset from the study by Zwaan et al. (2018) in this chapter. Have a look at @sec-independent or the SupMats document if you need a refresher about the Simon Task data.\n\n* Open last week's project\n* Create a new `.Rmd` file and save it to your project folder\n* Delete everything after the setup code chunk \n\n\n\n## Activity 2: Library and data for today\n\nToday, we'll need the following packages `rstatix`, `tidyverse`, `qqplotr`, `lsr`, and `pwr`. Again, we also need to read in the data from `MeansSimonTask.csv` and the demographics information from `DemoSimonTask.csv`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load in the packages\n???\n\n# read in the data\nzwaan_data <- ???\nzwaan_demo <- ???\n```\n:::\n\n\n\n\n\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## Solution \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load in the packages\nlibrary(rstatix)\nlibrary(tidyverse)\nlibrary(qqplotr)\nlibrary(lsr)\nlibrary(pwr)\n\n# read in the data\nzwaan_data <- read_csv(\"MeansSimonTask.csv\")\nzwaan_demo <- read_csv(\"DemoSimonTask.csv\")\n```\n:::\n\n\n:::\n\n\nAs usual, take some time to familiarize yourself with the data before starting the within-subjects t-test.\n\nToday, we’ll focus on the Simon effect. Remember that the Simon effect predicts that congruent trials will have shorter response times than incongruent trials.\n\n\n* Potential research question: \"Is there a significant difference in response times between congruent and incongruent trials in a Simon task?\"\n* Null Hypothesis (H~0~): \"There is no significant difference in response times between congruent and incongruent trials in a Simon task.\"\n* Alternative Hypothesis (H~1~): \"There is a significant difference in response times between congruent and incongruent trials in a Simon task.\"\n\n## Activity 3: Preparing the dataframe\n\nAgain, we need to calculate one mean response time (RT) value for congruent and one for incongruent trials per participant. Like last week, we can also compute the Simon effect again as the difference score between incongruent and congruent trails.\n\nTo keep all the data in one place, we should join this output with the demographics. While you won’t need the demographic information for the t-test itself, having it included will give you a complete dataframe. This can be useful when you need to calculate demographics for the Methods section; for example if you end up excluding data points you can compute sample size, age and gender splits straight away rather than having to apply the same exclusions to a different data object.\n\nFor the paired version of the `t.test`, we need congruent and inconguent trials in separate columns, so that each participant still only has one row in the dataframe (i.e., wide format). Here is the output we are after:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|participant |gender | age|education          |similarity | congruent| incongruent| simon_effect|\n|:-----------|:------|---:|:------------------|:----------|---------:|-----------:|------------:|\n|T1          |Female |  50|High school        |same       |  475.0032|    508.2835|     33.28029|\n|T10         |Male   |  45|Associate's degree |same       |  420.1515|    401.5800|    -18.57148|\n|T109        |Male   |  33|Bachelor's degree  |same       |  339.5343|    375.7152|     36.18085|\n|T11         |Female |  71|High school        |same       |  516.9722|    542.3111|     25.33889|\n|T111        |Female |  34|High school        |same       |  373.5778|    394.0665|     20.48874|\n\n</div>\n:::\n:::\n\n\n\nChallenge yourself: See if you could reproduce the table without hints this time.\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsimon_effect <- zwaan_data %>% \n  pivot_longer(cols = session1_congruent:session2_incongruent, names_to = \"col_headings\", values_to = \"RT\") %>% \n  separate(col_headings, into = c(\"Session_number\", \"congruency\"), sep = \"_\") %>% \n  group_by(participant, similarity, congruency) %>% \n  summarise(mean_RT = mean(RT)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = congruency, values_from = mean_RT) %>% \n  mutate(simon_effect = incongruent - congruent) %>% \n  full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>% \n  select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)\n```\n:::\n\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n## You could have also\n\n1. looked at the hints from the last chapter, since this is exactly the same dataframe we need today.\n2. saved the data object from last week as a csv file and read it in here.\n\n:::\n\n\n## Activity 4: Compute descriptives\n\nWe want to compute means and standard deviations for the `congruent` and the `incongruent` trials. Then we want to subtract the mean RT of the congruent trials from the mean RT of the incongruent trials to get the average difference score between the two conditions.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndescriptives <- simon_effect %>% \n  summarise(mean_congruent = mean(congruent),\n            sd_congruent = sd(congruent),\n            mean_incongruent = mean(incongruent),\n            sd_incongruent = sd(incongruent),\n            diff = mean_incongruent - mean_congruent, # diff = mean(simon_effect) would also work\n            sd_diff = sd(simon_effect))\n\ndescriptives\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| mean_congruent| sd_congruent| mean_incongruent| sd_incongruent|     diff|  sd_diff|\n|--------------:|------------:|----------------:|--------------:|--------:|--------:|\n|       427.6528|     74.17418|         462.0785|       74.69692| 34.42571| 21.59876|\n\n</div>\n:::\n:::\n\n\n\n::: {.callout-note}\n\nNotice how we did not have to use `group_by()` here since the data is in wide format.\n\n:::\n\n\n## Activity 5: Create an appropriate plot\n\nTo create an appropriate plot, we'd like the data to be in long format, with a column for `congruency` that hold the labels of congruent and incorgruent trials, and a column that stores the `mean_RT` for each. Each participant should have 2 rows now:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|participant |gender | age|education          |similarity | simon_effect|congruency  |  mean_RT|\n|:-----------|:------|---:|:------------------|:----------|------------:|:-----------|--------:|\n|T1          |Female |  50|High school        |same       |     33.28029|congruent   | 475.0032|\n|T1          |Female |  50|High school        |same       |     33.28029|incongruent | 508.2835|\n|T10         |Male   |  45|Associate's degree |same       |    -18.57148|congruent   | 420.1515|\n|T10         |Male   |  45|Associate's degree |same       |    -18.57148|incongruent | 401.5800|\n|T109        |Male   |  33|Bachelor's degree  |same       |     36.18085|congruent   | 339.5343|\n\n</div>\n:::\n:::\n\n\n\n::: {.callout-note icon=\"false\"} \n\n## Your Turn\n\nCreate the table above and then create an appropriate plot\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## Solution for the data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsimon_effect_long <- simon_effect %>% \n  pivot_longer(cols = c(congruent, incongruent), names_to = \"congruency\", values_to = \"mean_RT\")\n```\n:::\n\n\n\n:::\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## Solution for the plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(simon_effect_long, aes(x = congruency, y = mean_RT, fill = congruency)) +\n  geom_violin(alpha = 0.5) +\n  geom_boxplot(width = 0.4, alpha = 0.8) +\n  scale_fill_viridis_d(guide = \"none\") +\n  theme_classic() +\n  labs(x = \"Congruency\", y = \"mean Response Time\")\n```\n\n::: {.cell-output-display}\n![](08-paired_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n:::\n\n## Activity 6: Check assumptions\n\nThe assumptions for a paired t-test are fairly similar to the one-sample t-test.\n\n#### Assumption 1: Continuous DV {.unnumbered}\n\nThe dependent variable needs to be measured at interval or ratio level. We can confirm that by looking at either the columns `congruent` and `incongruent` in the object `simon_effect`. Or the variable `mean_RT` in `simon_effect_long`. This assumption holds.\n\n\n#### Assumption 2: Data are independent {.unnumbered}\n\nFor a paired t-test this assumption applies to the **pair of values**, i.e., each pair of values needs to be from a separate participant. We assume this assumption holds for our data.\n\n\n\n#### Assumption 3: Normality {.unnumbered}\n\nThis assumption requires the **difference scores** to be approximately normally distributed. We cannot see that from the violin-boxplot above and have to plot the difference score, i.e., variable `simon_effect`.\n\n::: {.callout-note icon=\"false\"} \n\n## Your Turn\n\nPlot the difference score\n\n::: {.callout-note collapse=\"true\" icon=\"false\"} \n\n## Hint\n\nThink back to the one-sample t-test. How did we plot the normality assumption there?\n\n:::\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## Solution\n\n::: {.panel-tabset}\n\n## Option 1: Q-Q plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(simon_effect, aes(sample = simon_effect)) +\n  stat_qq_band(fill = \"#FB8D61\", alpha = 0.4) +\n  stat_qq_line(colour = \"#FB8D61\") +\n  stat_qq_point()\n```\n\n::: {.cell-output-display}\n![](08-paired_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Option 2: Violin-boxplot of the difference score\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(simon_effect, aes(x = \"\", y = simon_effect)) +\n  geom_violin(fill = \"#FB8D61\", alpha = 0.4) + # alpha for opacity, fill for adding colour\n  geom_boxplot(fill = \"#FB8D61\", width = 0.5) + # change width of the boxes\n  theme_classic() +\n  labs(x = \"\",\n       y = \"Difference in mean Response Time scores\")\n```\n\n::: {.cell-output-display}\n![](08-paired_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Option 3: Shapiro-Wilk test\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nshapiro.test(simon_effect$simon_effect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tShapiro-Wilk normality test\n\ndata:  simon_effect$simon_effect\nW = 0.98588, p-value = 0.1047\n```\n:::\n:::\n\n:::\n\nBoth plots would suggest there are slight deviations from normality in the tails, but Shapiro-Wilk does not pick those up. Hence we conclude, the difference scores are approximately normally distributed.\n\n:::\n\n\n:::\n\n\n**If any of the assumptions are violated, use the non-parametric equivalent to the paired t-test, see @sec-alternative_paired.**\n\n\n## Activity 7: Compute a paired t-test and effect size\n\nWe can use the `t.test()` function again to compute the paired t-test. However, we are stuck with the BaseR pattern `data$column` once more. \n\nIn case you haven't picked it up by now, I am not much a fan of `data$column` (i.e., wide format) and prefer the `DV ~ IV` (i.e., long format) pattern. And there was a time when the `t.test()` function allowed to add an extra argument `paired = TRUE` to the formula version but that is no longer the case. Now, the argument *only* works on the default method, specifying arguments x and y separately. And because the default version doesn't allow us to add a `data = ` argument, we have to revert to `data$column`.\n\nLong story short, here are the arguments you need from the data object in wide format (in this case `simon_effect`:\n\n* `data$column` for condition 1\n* `data$column` for condition 2\n* the extra argument `paired = TRUE` to tell the function we are conducting a paired rather than a two-sample t-test\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nt.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPaired t-test\n\ndata:  simon_effect$congruent and simon_effect$incongruent\nt = -20.161, df = 159, p-value < 2.2e-16\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -37.79808 -31.05334\nsample estimates:\nmean difference \n      -34.42571 \n```\n:::\n:::\n\nThe output tells us pretty much what we need to know:\n\n* the test that was conducted (here a paired t-test)\n* the conditions that were compared (here congruent and incongruent), \n* the t value, degrees of freedom, and p,\n* the alternative hypothesis, \n* a 95% confidence interval,\n* and the mean difference score between both conditions (which also matches with our descriptives above)\n\n\nThe `t.test()` function does not give us an **effect size**, so, again, we have to compute it ourselves. We can use the `CohensD()` function from the `lsr` package as we did for the one-sample and the two-sample t-test. We can use the formula approach here as well, and add the extra argument `method = \"paired\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncohensD(simon_effect$congruent, simon_effect$incongruent, method = \"paired\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.593874\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\nThe `cohensD()` function would take a long format formula approach, such as from `simon_effect_long`, but you would need to assure that the columns are ordered correctly, i.e., Participant 1: condition 1, condition 2; Participant 2: condition 1, condition 2; etc.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncohensD(mean_RT ~ congruency, data = simon_effect_long, method = \"paired\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in cohensD(mean_RT ~ congruency, data = simon_effect_long, method =\n\"paired\"): calculating paired samples Cohen's d using formula input. Results\nwill be incorrect if cases do not appear in the same order for both levels of\nthe grouping factor\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.593874\n```\n:::\n:::\n\n:::\n\n## Activity 8: Sensitivity power analysis\n\nAs we the other t-test, we are conducting a sensitivity power analysis to determine the minimum effect size we could have determined with the number of participants (n = 160), alpha of 0.05 and power of 0.8. This will tell us if our analysis was sufficiently powered or not.\n\nThe function is once again `pwr.t.test()` from the `pwr` package. The arguments in the formula are the same as for the one-sample t-test; we just need to adjust the number of participants and set the type to \"paired\".\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npwr.t.test(n = 160, sig.level = 0.05, power = 0.8, type = \"paired\", alternative = \"two.sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n     Paired t test power calculation \n\n              n = 160\n              d = 0.222858\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n\nNOTE: n is number of *pairs*\n```\n:::\n:::\n\nThe minimum effect size we could reliably detect is 0.22. Our actual effect size was 1.59, so this analysis was sufficiently powered.\n\n## Activity 9: The write-up\n\nUsing a , a medium significant effect was found (t(31) = 2.4, p = .023, d = .42) which supports the alternative hypothesis that preferential looking time is higher for the familiar melody compared to the baseline stage.\n\nWe hypothesised that there would be a significant difference in the response times between congruent $(M = 427.65 msec, SD = 74.17 msec)$ and incongruent trials $(M = 462.08 msec, SD = 74.70 msec)$ of a Simon task. On average, participants were faster in the congruent compared to the incongruent condition $(M_{diff} = 34.43 msec, SD_{diff} = 21.60 msec)$. Using a within-subjects t-test, the effect was found to be significant and of a large magnitude, $t(159) = 20.16, p < .001, d = 1.59$. Therefore, we reject the null hypothesis in favour of H~1~.\n\n\n## Activity 10: Non-parametric alternative {#sec-alternative_paired}\n\n\nThe **Wilcoxon signed-rank test** is the non-parametric equivalent to the paired t-test, comparing the difference between the median for two measurements. \n\nBefore we compute the test, we need to determine some **summary stats** (e.g., the median) for the congruent and incongruent conditions. Similar to the One-sample Wilcoxon signed-rank test, we can use the `summary()` function again because our data is in wide format.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(simon_effect)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n participant           gender               age         education        \n Length:160         Length:160         Min.   :19.00   Length:160        \n Class :character   Class :character   1st Qu.:30.75   Class :character  \n Mode  :character   Mode  :character   Median :37.00   Mode  :character  \n                                       Mean   :39.86                     \n                                       3rd Qu.:49.00                     \n                                       Max.   :71.00                     \n  similarity          congruent      incongruent     simon_effect   \n Length:160         Min.   :290.0   Min.   :324.9   Min.   :-18.57  \n Class :character   1st Qu.:379.4   1st Qu.:413.9   1st Qu.: 21.62  \n Mode  :character   Median :411.3   Median :449.7   Median : 34.77  \n                    Mean   :427.7   Mean   :462.1   Mean   : 34.43  \n                    3rd Qu.:458.7   3rd Qu.:496.3   3rd Qu.: 46.22  \n                    Max.   :741.5   Max.   :727.9   Max.   :103.84  \n```\n:::\n:::\n\n\nNow we can move on to the **Wilcoxon signed-rank test**. We will use the `wilcox.test()` function again, but add the argument `paired = TRUE`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon signed rank test with continuity correction\n\ndata:  simon_effect$congruent and simon_effect$incongruent\nV = 144, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n```\n:::\n:::\n\n\n\n::: {.callout-note} \n\nWe could have also run a **One-sample Wilcoxon signed-rank test** on the difference score, but instead of comparing that to a population median, we would compare it to 0.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwilcox.test(simon_effect$simon_effect, mu = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon signed rank test with continuity correction\n\ndata:  simon_effect$simon_effect\nV = 12736, p-value < 2.2e-16\nalternative hypothesis: true location is not equal to 0\n```\n:::\n:::\n\n:::\n\n::: {.callout-important} \n\n## The order of the arguments matters\n\nThe p-value is the same but the V values seem to differ. Yes and no. The order in which you input variables into the function will affect the value of V - has to do with how the ranks are getting assigned. In our column `simon_effect` we subtracted congruent RT from incongruent RT. To have the exact equivalent, we would have had to switch the columns in the `wilcox.test()` function. And as you can see, the V values match.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon signed rank test with continuity correction\n\ndata:  simon_effect$incongruent and simon_effect$congruent\nV = 12736, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n```\n:::\n:::\n\n\n:::\n\n\nWe should also compute the **standardised test statistic Z**. Again, we need to calculate Z manually, using the qnorm function on the halved p-value from our Wilcoxon test above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# storing the p-value\np_wilcoxon <- wilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)$p.value\n\n# calculate the z value from half the p-value\nz = qnorm(p_wilcoxon/2)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -10.72532\n```\n:::\n:::\n\n\n\nTo calculate an **effect size**, we would need to use the function `wilcox_effsize()` from the `rstatix` package. Unlike, the `wilcox.test()` and the `t.test()` function, `wilcox_effsize()` expects data to be in long format to be able to use the `DV ~ IV` pattern. Fortunately, we still have that available in `simon_effect_long`. We also need to add the argument `paired = TRUE`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwilcox_effsize(data = simon_effect_long, formula = mean_RT ~ congruency, paired = TRUE)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|.y.     |group1    |group2      |   effsize|  n1|  n2|magnitude |\n|:-------|:---------|:-----------|---------:|---:|---:|:---------|\n|mean_RT |congruent |incongruent | 0.8479786| 160| 160|large     |\n\n</div>\n:::\n:::\n\n\nNow we have all the numbers to **write this up**:\n\nA Wilcoxon signed-rank test was conducted to determine whether there was a significant difference in response times between congruent $(Mdn = 411.3 msec)$ and incongruent trials $(Mdn = 449.7 msec)$ in a Simon task. Median response times of Congruent trials were significantly faster $(Mdn = 34.77 msec)$ than incongruent trials, $Z = -10.73, p < .001, r = .848$. The difference can be classified as large according to Cohen (1992). Therefore, we reject the null hypothesis in favour of H~1~.\n\n\n\n## [Pair-coding]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n\n\n\n## [Test your knowledge]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\n\n",
    "supporting": [
      "08-paired_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}