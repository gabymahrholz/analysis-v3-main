{
  "hash": "8af3f441c170478e40ab0dc92da59076",
  "result": {
    "markdown": "# Data viz {#sec-dataviz}\n\n\n\n\n\n## Intended Learning Outcomes {.unnumbered}\n\nBy the end of this chapter you should be able to:\n\n-   a\n-   b\n-   Be able to create an appropriate for your data\n\n## [Individual Walkthrough]{style=\"color: #EBA347; text-transform: uppercase;\"} {.unnumbered}\n\n## Building pots\n\nWe are using the package `ggplot2` to create data visualisations. It's part of the tidyverse package. Actually, most people call th package `ggplot` but it's official name is `ggplot2`.\n\n::: grid\n::: g-col-5\n**ggplot2** uses a layered grammar of graphics, in which plots are built up in a series of layers. You would start with a base layer (opening ggplot), adding **data** and **aesthetics**, and selecting the **geometries** for plot.\n\nThese first 3 layers will give you the most simple version of a complete plot, but you could add other layers to make the plots pretty by using **scales**, **facets**, **coordinates**, **labels** and **themes**.\n:::\n\n::: g-col-7\n![gg layers [(Presentation by Ryan Safner)](https://metricsf20.classes.ryansafner.com/slides/1.3-slides#20){target=\"_blank\"}](images/gglayers.png){width=\"70%\"}\n:::\n:::\n\nTo give you a brief overview of the layering system, let's use the package `palmerpenguins` ([https://allisonhorst.github.io/palmerpenguins/](https://allisonhorst.github.io/palmerpenguins/){target=\"_blank\"}). It contains data about bill length and depth, flipper length, and body mass, etc.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|\n\n</div>\n:::\n:::\n\n\nLet's build a basic scatterplot to show the relationship between `flipper_length` and `body_mass`. We will customise plots further later on in the individual plots. This is just a quick overview of the different layers.\n\n-   Layer 1 creates a plot base to built up upon.\n-   Layer 2 adds the `data` and some `aesthetics`\n    -   data is first argument\n    -   aesthetics are added via the mapping argument. There you define your variables to be added (such as x, or x and y) and allows you specify overall properties like the colour of grouping variables etc.\n-   Layer 3 adds the geometries or `geom_?` for short. This tells ggplot in which style we want to plot the data points. Remember to add these layers with a `+` rather than a pipe `%>%`. You can add multiple geoms if you wish, e.g., building a violin-boxplot\n-   Layer 4 adds the `scale_?` functions which can help you customise the aesthetics, such as changing colour. You can do much more with scales, but we'll get to that later.\n-   Layer 5 introduces `facets`, such as `facet_wrap()` which allows you to add another dimension to the data output by showing the relationship you are interested in for each level of a categorical variable.\n-   Layer 6 - coordinates: `coord_cartesian()` controls the limits for the x- and y-axes (arguments `xlim` and `ylim`). Changing those allows you to zoom in or out of your plot.\n-   Layer 7 helps you to modify axes labels.\n-   Layer 8 controls the general style of a ggplot (e.g., background colour, size of text, borders, etc.). R comes with a few pre-defined ones (like `theme_classic`, `theme_bw`, `theme_minimal`, `theme_light`).\n\nClick on the tabs below to see how each layer contributes to refining the plot.\n\n::: {.panel-tabset group=\"layers\"}\n## Layer 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nWe don't see much here. It's basically an empty plot layer.\n\n## Layer 2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm))\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nYou won't see any data points yet, because we haven't specified how we want to display the data points. But we mapped in the aesthetics, that we want to plot variable body mass on the x-axis and flipper length on the y-axis. This also adds the axes titles and the values and break points of the axes.\n\n::: callout-tip\nYou won't need to add `data =` or `mapping =` if you keep those arguments in exactly that order. Likewise, the first column name you enter within the `aes()` function will always be interpreted as x, and the second as y, so you could omit them if you wish.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(penguins, aes(body_mass_g, flipper_length_mm))\n```\n:::\n\n\nwill give you the same output as the code above.\n:::\n\n## Layer 3\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nHere we are telling ggplot that we want a scatterplot added. There is a warning displayed showing that rows were removed because of missing values.\n\nThe argument `colour` adds colour to the points according to a grouping variable (in this case sex). If you want all of the points to be black (i.e. only represent 2 rather than 3 dimensions of the data), leave the `colour` argument out.\n\n## Layer 4\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +\n  geom_point() +\n  # changes colour palette\n  scale_colour_brewer(palette = \"Dark2\") + \n  # add breaks from 2500 to 6500 in increasing steps of 500\n  scale_x_continuous(breaks = seq(from = 2500, to = 6500, by = 500)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nThe `scale_?` functions allow us to change the colour palette of the plot or the axes breaks etc. You could change the name of the axis in `scale_x_continuous()` as well or leave it for Layer 7.\n\n## Layer 5\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +\n  geom_point() +\n  scale_colour_brewer(palette = \"Dark2\") + \n  # split main plot up into different subplots by species \n  facet_wrap(~ species) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nHere we are faceting this plot out for the individual species.\n\n## Layer 6\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +\n  geom_point() +\n  scale_colour_brewer(palette = \"Dark2\") + \n  facet_wrap(~ species) +\n  # limits the range of the y axis\n  coord_cartesian(ylim = c(0, 250)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nChanging the limits of the y axis to zoom in or out of the plot. If you wanted to the same for the x axis, you would add an argument `xlim` to the `coord_cartesian()` function.\n\n## Layer 7\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +\n  geom_point() +\n  scale_colour_brewer(palette = \"Dark2\") + \n  facet_wrap(~ species) +\n  labs(x = \"Body Mass (in g)\", # labels the x axis\n       y = \"Flipper length (in mm)\", # labels the y axis\n       colour = \"Sex\") # labels the grouping variable in the legend\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nYou can change the axes labels via the `labs()` function or include that step when modifying the scales (i.e. in the `scale_x_continuous()` function).\n\n## Layer 8\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +\n  geom_point() +\n  scale_colour_brewer(palette = \"Dark2\") + \n  facet_wrap(~ species) +\n  labs(x = \"Body Mass (in g)\", \n       y = \"Flipper length (in mm)\",\n       colour = \"Sex\") +\n  # add a theme\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 11 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n`theme_classic()` is applied to change the overall appearance of the plot.\n:::\n\n::: callout-important\nYou need to stick to the first 3 layers to get your base plot. Everything else is optional meaning you don't have to use all 8 layers in a plot. And layers 4-8 can be added in a random order whereas layers 1-3 are fixed.\n:::\n\n## Activity 1: Set-up\n\nOk, let's move on to our data for today. But first, we need to set up a new project and create an Rmd:\n\n-   Create a new project and name it something meaningful (e.g., \"2A_chapter3\", or \"03_data_viz\"). See @sec-project if you need some guidance.\n-   Create a new Rmd and save it to your project folder. Name it something meaningful (e.g., \"chapter_03\", \"03_data_viz.Rmd\"). See @sec-rmd if you need some guidance.\n-   Delete everything below line 12 (keep the set-up code chunk)\n\n## Activity 2: Download the data\n\n-   Download the data for today: [data_ch3](data/data_ch3.zip \"download\"). There are 2 csv files contained in the zip-folder you just downloaded. One is the data file (`hp_data_modified.csv`) and the other is the `questionnaire_codebook` for the main 3 questionnaires used in the dataset.\n-   Unzip the zip folder so that all data files, the Rmd and the project are in the same folder (see image below)\n\nIf you set it up correctly, your folder should look like this:\n\n::: {#img-data-viz layout-ncol=\"2\"}\n![Folder on your computer (left)](images/data_viz_setup.PNG)\n\n![Files pane in RStudio (right)](images/files_plane_data_viz.PNG)\n:::\n\n##### Info about the data {.unnumbered}\n\n**Citation**\n\n> Jakob, L., Garcia-Garzon, E., Jarke, H., & Dablander, F. (2019). The Science Behind the Magic? The Relation of the Harry Potter “Sorting Hat Quiz” to Personality and Human Values. *Collabra: Psychology, 5*(1), 31. [https://doi.org/10.1525/collabra.240](https://doi.org/10.1525/collabra.240){target=\"_blank\"}\n\n**Abstract**\n\n> The Harry Potter series describes the adventures of a boy and his peers in a fictional world at the “Hogwarts School of Witchcraft and Wizardry”. In the series, pupils get appointed to one of four groups (Houses) at the beginning of their education based on their personality traits. The author of the books has constructed an online questionnaire that allows fans to find out their House affiliation. Crysel, Cook, Schember, and Webster (2015) argued that being sorted into a particular Hogwarts House through the Sorting Hat Quiz is related to empirically established personality traits. We replicated their study while improving on sample size, methods, and analysis. Although our results are similar, effect sizes are small overall, which attenuates the claims by Crysel et al. The effect vanishes when restricting the analysis to participants who desired, but were not sorted into a particular House. On a theoretical level, we extend previous research by also analysing the relation of the Hogwarts Houses to Schwartz’s Basic Human Values but find only moderate or no relations.\n\n**Changes made to the dataset**\n\n-   The dataset is a reduced version of the original dataset.\n-   The values in the IPIP 50 were turned into character responses\n-   All reverse-coded items were already corrected in the original dataset, so we reversed that process.\n-   The PVQ-RR has been revised repeatedly over the years (and is somewhat confusing tbh). To keep it simple, we opted to code the 57 items into a 12-value category structure as proposed by Giménez and Tamajón (2019; [https://doi.org/10.1016/j.heliyon.2019.e01797](https://doi.org/10.1016/j.heliyon.2019.e01797){target=\"_blank\"}). This is not in line with Jakob et al. (2019), who used a 10-value categorisation approach.\n\n## Activity 3: Load in the libraries and read in the data\n\nGiven the codebook is also in a csv format, you might want to read in the codebook as well. It might help us speed up data wrangling process.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## packages \nlibrary(tidyverse)\n\n## data\nhp_data <- read_csv(\"hp_data_modified.csv\")\ncodebook <- read_csv(\"hp_questionnaire_codebook.csv\")\n```\n:::\n\n\n\n\n#### Familiarise yourself with the data structure {.unnumbered}\n\nAs we said in @sec-familiarise, it is always recommended to glimpse at the data to see how many variables and observations there are in the dataset and what kind of data type they are.\n\n::: {.callout-note collapse=\"true\"}\n## Using glimpse to view the data. The output is pretty long, therefore it's hidden. Click to see the output.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(hp_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 988\nColumns: 159\n$ PP_ID                <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15…\n$ books                <chr> \"Harry Potter and the Philosopher's Stone,Harry P…\n$ language_books       <chr> \"English\", \"German and English\", \"Both English an…\n$ movies               <chr> \"Harry Potter and the Philosopher's Stone,Harry P…\n$ language_movies      <chr> \"English\", \"German and English\", \"Both English an…\n$ Sorting_completed_YN <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Y…\n$ Sorting_house        <chr> \"Ravenclaw\", \"Gryffindor\", \"Gryffindor\", \"Slyther…\n$ Sorting_house_wish   <chr> \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\", \"Slytherin…\n$ age                  <dbl> 21, 22, 27, 21, 20, 27, 26, 29, 23, 24, 25, 33, 2…\n$ country              <chr> \"Germany\", \"Germany\", \"France\", \"Norway\", \"Chile\"…\n$ language             <chr> \"german\", \"German\", \"French\", \"Norwegian\", \"Spani…\n$ occupation           <chr> \"Student\", \"Student\", \"Employed\", \"Student\", \"Stu…\n$ gender               <chr> \"Female\", \"Female\", \"Female\", \"Male\", \"Female\", \"…\n$ Bravery              <chr> \"Gryffindor\", \"Gryffindor\", \"Gryffindor\", \"Gryffi…\n$ Hardwork             <chr> \"Ravenclaw\", \"Ravenclaw\", \"Hufflepuff\", \"Hufflepu…\n$ Intelligence         <chr> \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw…\n$ Ambition             <chr> \"Slytherin\", \"Slytherin\", \"Slytherin\", \"Slytherin…\n$ Daring               <chr> \"Gryffindor\", \"Hufflepuff\", \"Gryffindor\", \"Gryffi…\n$ Dedication           <chr> \"Ravenclaw\", \"Slytherin\", \"Hufflepuff\", \"Hufflepu…\n$ Knowledge            <chr> \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw…\n$ Cunning              <chr> \"Slytherin\", \"Hufflepuff\", \"Slytherin\", \"Slytheri…\n$ Extraverted          <chr> \"Hufflepuff\", \"Hufflepuff\", \"Hufflepuff\", \"Gryffi…\n$ Agreeable            <chr> \"Hufflepuff\", \"Gryffindor\", \"Hufflepuff\", \"Huffle…\n$ Clever               <chr> \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw…\n$ Manipulative         <chr> \"Slytherin\", \"Slytherin\", \"Slytherin\", \"Slytherin…\n$ IPIP_01              <chr> \"moderately accurate\", \"neither accurate nor inac…\n$ IPIP_02              <chr> \"very inaccurate\", \"moderately accurate\", \"very i…\n$ IPIP_03              <chr> \"moderately inaccurate\", \"very accurate\", \"modera…\n$ IPIP_04              <chr> \"moderately inaccurate\", \"neither accurate nor in…\n$ IPIP_05              <chr> \"very accurate\", \"moderately accurate\", \"very acc…\n$ IPIP_06              <chr> \"moderately inaccurate\", \"neither accurate nor in…\n$ IPIP_07              <chr> \"very accurate\", \"moderately inaccurate\", \"very a…\n$ IPIP_08              <chr> \"moderately accurate\", \"very inaccurate\", \"modera…\n$ IPIP_09              <chr> \"moderately accurate\", \"neither accurate nor inac…\n$ IPIP_10              <chr> \"very inaccurate\", \"very inaccurate\", \"very inacc…\n$ IPIP_11              <chr> \"moderately accurate\", \"moderately inaccurate\", \"…\n$ IPIP_12              <chr> \"very inaccurate\", \"moderately inaccurate\", \"very…\n$ IPIP_13              <chr> \"neither accurate nor inaccurate\", \"very accurate…\n$ IPIP_14              <chr> \"very inaccurate\", \"moderately accurate\", \"modera…\n$ IPIP_15              <chr> \"moderately accurate\", \"neither accurate nor inac…\n$ IPIP_16              <chr> \"neither accurate nor inaccurate\", \"moderately in…\n$ IPIP_17              <chr> \"moderately accurate\", \"neither accurate nor inac…\n$ IPIP_18              <chr> \"moderately inaccurate\", \"moderately inaccurate\",…\n$ IPIP_19              <chr> \"neither accurate nor inaccurate\", \"moderately in…\n$ IPIP_20              <chr> \"moderately inaccurate\", \"very inaccurate\", \"very…\n$ IPIP_21              <chr> \"very inaccurate\", \"moderately accurate\", \"modera…\n$ IPIP_22              <chr> \"moderately inaccurate\", \"moderately inaccurate\",…\n$ IPIP_23              <chr> \"very inaccurate\", \"moderately inaccurate\", \"very…\n$ IPIP_24              <chr> \"neither accurate nor inaccurate\", \"moderately in…\n$ IPIP_25              <chr> \"moderately accurate\", \"very accurate\", \"moderate…\n$ IPIP_26              <chr> \"very inaccurate\", \"moderately inaccurate\", \"mode…\n$ IPIP_27              <chr> \"moderately inaccurate\", \"moderately accurate\", \"…\n$ IPIP_28              <chr> \"moderately accurate\", \"moderately accurate\", \"ve…\n$ IPIP_29              <chr> \"moderately inaccurate\", \"moderately accurate\", \"…\n$ IPIP_30              <chr> \"very inaccurate\", \"moderately inaccurate\", \"very…\n$ IPIP_31              <chr> \"very inaccurate\", \"moderately accurate\", \"modera…\n$ IPIP_32              <chr> \"moderately inaccurate\", \"moderately inaccurate\",…\n$ IPIP_33              <chr> \"moderately inaccurate\", \"very accurate\", \"modera…\n$ IPIP_34              <chr> \"moderately inaccurate\", \"moderately inaccurate\",…\n$ IPIP_35              <chr> \"moderately accurate\", \"moderately accurate\", \"mo…\n$ IPIP_36              <chr> \"moderately accurate\", \"moderately inaccurate\", \"…\n$ IPIP_37              <chr> \"moderately accurate\", \"moderately accurate\", \"mo…\n$ IPIP_38              <chr> \"neither accurate nor inaccurate\", \"moderately in…\n$ IPIP_39              <chr> \"very inaccurate\", \"moderately inaccurate\", \"neit…\n$ IPIP_40              <chr> \"moderately accurate\", \"moderately accurate\", \"ve…\n$ IPIP_41              <chr> \"moderately inaccurate\", \"moderately accurate\", \"…\n$ IPIP_42              <chr> \"moderately accurate\", \"neither accurate nor inac…\n$ IPIP_43              <chr> \"moderately inaccurate\", \"moderately inaccurate\",…\n$ IPIP_44              <chr> \"moderately inaccurate\", \"moderately inaccurate\",…\n$ IPIP_45              <chr> \"very accurate\", \"moderately accurate\", \"very acc…\n$ IPIP_46              <chr> \"very accurate\", \"moderately inaccurate\", \"neithe…\n$ IPIP_47              <chr> \"moderately inaccurate\", \"moderately accurate\", \"…\n$ IPIP_48              <chr> \"moderately inaccurate\", \"moderately accurate\", \"…\n$ IPIP_49              <chr> \"moderately inaccurate\", \"moderately inaccurate\",…\n$ IPIP_50              <chr> \"moderately accurate\", \"moderately accurate\", \"ve…\n$ SD_M1                <dbl> 3, 4, 3, 4, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 3, 4, 4…\n$ SD_M2                <dbl> 2, 3, 2, 5, 1, 2, 1, 2, 1, 2, 2, 4, 4, 4, 4, 2, 4…\n$ SD_M3                <dbl> 2, 3, 1, 4, 2, 2, 2, 3, 3, 2, 4, 1, 3, 2, 3, 3, 2…\n$ SD_M4                <dbl> 2, 2, 3, 4, 3, 3, 2, 4, 2, 2, 3, 4, 4, 4, 3, 2, 2…\n$ SD_M5                <dbl> 2, 2, 1, 4, 2, 2, 1, 1, 1, 1, 2, 1, 4, 3, 2, 2, 3…\n$ SD_M6                <dbl> 1, 3, 1, 5, 3, 3, 3, 4, 1, 2, 3, 1, 5, 1, 4, 3, 3…\n$ SD_M7                <dbl> 3, 5, 4, 5, 2, 5, 4, 4, 5, 2, 3, 1, 5, 4, 4, 5, 5…\n$ SD_M8                <dbl> 1, 3, 2, 2, 3, 1, 1, 3, 1, 2, 3, 1, 2, 1, 3, 1, 2…\n$ SD_M9                <dbl> 4, 4, 2, 4, 1, 4, 2, 2, 1, 3, 3, 1, 4, 5, 4, 1, 3…\n$ SD_N1                <dbl> 1, 3, 4, 4, 2, 3, 2, 1, 3, 3, 1, 1, 2, 2, 4, 3, 1…\n$ SD_N2                <dbl> 4, 1, 3, 3, 2, 3, 4, 4, 5, 3, 5, 5, 4, 2, 2, 5, 4…\n$ SD_N3                <dbl> 3, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2, 1, 3, 2, 2, 1, 5…\n$ SD_N4                <dbl> 2, 2, 2, 1, 2, 2, 2, 5, 2, 1, 3, 1, 3, 1, 4, 1, 2…\n$ SD_N5                <dbl> 1, 2, 2, 4, 3, 2, 1, 4, 1, 3, 2, 1, 4, 2, 2, 1, 4…\n$ SD_N6                <dbl> 4, 1, 2, 4, 4, 4, 2, 5, 5, 3, 3, 1, 4, 1, 3, 4, 2…\n$ SD_N7                <dbl> 1, 3, 2, 3, 1, 1, 1, 4, 1, 3, 2, 1, 2, 4, 4, 1, 3…\n$ SD_N8                <dbl> 4, 3, 3, 2, 4, 3, 3, 4, 3, 4, 4, 3, 2, 2, 2, 4, 1…\n$ SD_N9                <dbl> 1, 4, 2, 4, 3, 2, 3, 2, 1, 4, 4, 1, 5, 2, 3, 3, 4…\n$ SD_P1                <dbl> 1, 3, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 4, 2, 2…\n$ SD_P2                <dbl> 2, 3, 1, 4, 3, 4, 4, 4, 2, 2, 3, 3, 2, 2, 1, 3, 2…\n$ SD_P3                <dbl> 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 4, 2, 1…\n$ SD_P4                <dbl> 1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 3, 1, 1…\n$ SD_P5                <dbl> 3, 4, 1, 4, 1, 2, 3, 4, 1, 3, 2, 1, 4, 4, 3, 1, 1…\n$ SD_P6                <dbl> 3, 3, 1, 4, 1, 2, 2, 2, 1, 1, 2, 1, 3, 1, 3, 2, 1…\n$ SD_P7                <dbl> 5, 5, 4, 1, 5, 5, 5, 5, 5, 2, 5, 5, 2, 5, 2, 5, 2…\n$ SD_P8                <dbl> 1, 1, 3, 2, 3, 2, 1, 3, 1, 2, 1, 1, 1, 1, 3, 3, 3…\n$ SD_P9                <dbl> 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 4…\n$ PVQ_01               <dbl> 5, 5, 5, 5, 6, 6, 4, 6, 4, 4, 5, 5, 5, 6, 6, 4, 6…\n$ PVQ_02               <dbl> 2, 6, 2, 4, 5, 2, 4, 4, 2, 3, 4, 4, 6, 4, 4, 6, 6…\n$ PVQ_03               <dbl> 4, 6, 3, 5, 6, 4, 4, 5, 3, 4, 5, 4, 5, 3, 4, 4, 3…\n$ PVQ_04               <dbl> 2, 5, 4, 3, 3, 4, 5, 6, 5, 4, 5, 5, 4, 5, 4, 3, 2…\n$ PVQ_05               <dbl> 5, 5, 4, 3, 5, 5, 5, 6, 4, 5, 6, 6, 6, 5, 3, 5, 4…\n$ PVQ_06               <dbl> 1, 3, 2, 5, 3, 3, 2, 2, 1, 2, 2, 3, 3, 2, 3, 4, 4…\n$ PVQ_07               <dbl> 5, 5, 5, 3, 4, 5, 4, 5, 6, 4, 4, 4, 2, 5, 3, 5, 1…\n$ PVQ_08               <dbl> 3, 5, 4, 4, 6, 6, 3, 6, 2, 4, 6, 6, 3, 3, 2, 6, 3…\n$ PVQ_09               <dbl> 4, 4, 5, 2, 3, 4, 4, 3, 5, 3, 5, 2, 5, 3, 3, 6, 3…\n$ PVQ_10               <dbl> 4, 4, 6, 2, 5, 3, 4, 6, 4, 4, 5, 4, 4, 5, 6, 3, 5…\n$ PVQ_11               <dbl> 3, 6, 6, 6, 6, 6, 5, 5, 6, 5, 5, 6, 6, 6, 5, 4, 4…\n$ PVQ_12               <dbl> 1, 2, 1, 6, 2, 2, 2, 1, 1, 2, 3, 4, 3, 3, 1, 5, 3…\n$ PVQ_13               <dbl> 3, 5, 3, 5, 4, 4, 5, 5, 2, 3, 4, 4, 5, 5, 3, 6, 4…\n$ PVQ_14               <dbl> 5, 6, 5, 5, 6, 6, 6, 6, 4, 5, 6, 6, 6, 5, 6, 5, 4…\n$ PVQ_15               <dbl> 2, 3, 2, 2, 3, 4, 3, 5, 6, 4, 3, 2, 2, 2, 2, 2, 3…\n$ PVQ_16               <dbl> 4, 6, 5, 6, 6, 4, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5…\n$ PVQ_17               <dbl> 4, 6, 5, 6, 6, 4, 4, 6, 6, 5, 4, 5, 5, 6, 4, 4, 5…\n$ PVQ_18               <dbl> 1, 2, 2, 3, 2, 2, 2, 4, 1, 3, 2, 1, 1, 2, 2, 2, 4…\n$ PVQ_19               <dbl> 4, 4, 5, 4, 5, 6, 6, 5, 5, 3, 4, 5, 5, 6, 6, 3, 5…\n$ PVQ_20               <dbl> 1, 5, 1, 6, 2, 2, 2, 4, 1, 2, 3, 4, 5, 2, 2, 5, 4…\n$ PVQ_21               <dbl> 2, 3, 3, 0, 5, 4, 1, 0, 2, 4, 5, 0, 4, 1, 3, 6, 1…\n$ PVQ_22               <dbl> 5, 2, 3, 2, 2, 3, 3, 5, 6, 3, 4, 3, 4, 3, 2, 3, 1…\n$ PVQ_23               <dbl> 4, 5, 6, 5, 6, 5, 4, 5, 5, 5, 5, 6, 6, 6, 6, 4, 4…\n$ PVQ_24               <dbl> 2, 3, 2, 5, 2, 3, 4, 5, 4, 3, 3, 4, 5, 3, 3, 3, 4…\n$ PVQ_25               <dbl> 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 4, 6, 5, 5, 5, 5, 4…\n$ PVQ_26               <dbl> 3, 6, 3, 6, 4, 4, 5, 2, 1, 4, 5, 5, 6, 3, 5, 6, 4…\n$ PVQ_27               <dbl> 5, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 2…\n$ PVQ_28               <dbl> 3, 3, 6, 3, 5, 2, 2, 4, 4, 4, 5, 3, 4, 3, 6, 3, 2…\n$ PVQ_29               <dbl> 1, 4, 2, 5, 2, 2, 1, 1, 1, 2, 3, 3, 4, 4, 5, 4, 4…\n$ PVQ_30               <dbl> 3, 4, 5, 3, 5, 3, 4, 5, 4, 4, 5, 4, 5, 5, 4, 4, 5…\n$ PVQ_31               <dbl> 1, 3, 2, 3, 2, 4, 2, 4, 6, 2, 4, 1, 2, 2, 4, 5, 4…\n$ PVQ_32               <dbl> 4, 5, 3, 5, 5, 3, 3, 5, 5, 3, 4, 5, 5, 5, 5, 5, 5…\n$ PVQ_33               <dbl> 1, 2, 2, 3, 4, 3, 2, 2, 2, 2, 1, 2, 1, 3, 1, 1, 3…\n$ PVQ_34               <dbl> 4, 5, 6, 4, 6, 6, 5, 6, 5, 4, 5, 6, 6, 6, 5, 5, 5…\n$ PVQ_35               <dbl> 1, 5, 2, 3, 4, 2, 2, 2, 1, 4, 3, 4, 5, 3, 2, 6, 5…\n$ PVQ_36               <dbl> 5, 6, 4, 5, 6, 4, 5, 3, 3, 4, 4, 5, 5, 4, 5, 5, 5…\n$ PVQ_37               <dbl> 5, 5, 4, 3, 6, 5, 5, 6, 4, 5, 5, 6, 6, 6, 5, 6, 6…\n$ PVQ_38               <dbl> 5, 4, 5, 2, 5, 3, 6, 4, 6, 4, 5, 4, 4, 4, 3, 5, 4…\n$ PVQ_39               <dbl> 4, 5, 5, 3, 6, 5, 4, 6, 6, 4, 5, 6, 5, 6, 6, 4, 6…\n$ PVQ_40               <dbl> 1, 2, 2, 3, 3, 3, 2, 4, 1, 2, 2, 1, 2, 3, 1, 1, 4…\n$ PVQ_41               <dbl> 2, 2, 2, 4, 2, 3, 1, 2, 1, 2, 2, 3, 4, 4, 4, 3, 3…\n$ PVQ_42               <dbl> 1, 5, 2, 2, 2, 4, 4, 3, 6, 2, 2, 1, 2, 3, 2, 5, 2…\n$ PVQ_43               <dbl> 5, 5, 5, 4, 6, 5, 4, 4, 5, 4, 3, 5, 5, 5, 5, 5, 6…\n$ PVQ_44               <dbl> 1, 2, 1, 4, 2, 2, 1, 1, 1, 2, 1, 1, 3, 2, 1, 4, 1…\n$ PVQ_45               <dbl> 2, 3, 4, 2, 5, 6, 2, 5, 2, 4, 6, 6, 5, 3, 3, 6, 3…\n$ PVQ_46               <dbl> 4, 4, 3, 3, 6, 3, 3, 2, 3, 3, 4, 1, 4, 4, 5, 2, 3…\n$ PVQ_47               <dbl> 3, 4, 5, 4, 5, 5, 4, 4, 5, 5, 4, 5, 4, 4, 5, 1, 2…\n$ PVQ_48               <dbl> 4, 3, 5, 6, 4, 2, 2, 4, 6, 4, 4, 5, 6, 5, 5, 4, 4…\n$ PVQ_49               <dbl> 4, 5, 5, 5, 3, 3, 2, 4, 6, 4, 4, 3, 5, 5, 4, 6, 3…\n$ PVQ_50               <dbl> 3, 4, 2, 3, 4, 2, 2, 3, 1, 4, 4, 3, 3, 3, 1, 6, 3…\n$ PVQ_51               <dbl> 5, 2, 2, 2, 3, 3, 3, 3, 6, 3, 4, 4, 3, 4, 3, 3, 3…\n$ PVQ_52               <dbl> 4, 5, 4, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 3, 6, 4…\n$ PVQ_53               <dbl> 2, 3, 2, 4, 3, 3, 3, 2, 2, 3, 4, 3, 3, 2, 1, 4, 4…\n$ PVQ_54               <dbl> 3, 2, 3, 2, 3, 3, 4, 5, 4, 4, 4, 3, 3, 5, 5, 2, 3…\n$ PVQ_55               <dbl> 5, 5, 5, 5, 5, 6, 5, 4, 5, 5, 4, 4, 5, 5, 4, 4, 4…\n$ PVQ_56               <dbl> 4, 6, 5, 6, 6, 5, 5, 6, 5, 4, 5, 6, 5, 6, 6, 5, 4…\n$ PVQ_57               <dbl> 4, 6, 5, 5, 5, 4, 4, 6, 4, 4, 4, 5, 5, 4, 4, 5, 4…\n```\n:::\n:::\n\n:::\n\n## Activity 4: Data wrangling\n\nBefore we can plot anything, we need to get the data into the right shape.\n\nThe data for the questionnaires looks fairly complex. It's best to split it up into separate data objects to wrangle the questionnaire data. The next sections will wrangle the data separately for the\n\n-   IPIP 50 - International Personality Item Pool (Goldberg et al., 2006)\n-   SD 3 - Short Dark Triad (Jones & Paulhus, 2013)\n-   PVQ-RR - Portrait Values Questionnaire (Schwartz et al., 2012).\n\n### IPIP 50\n\n**Overall goal** is to compute a score for each of the personality dimension (Agreeableness, Conscientiousness, Emotional Stability, Extraversion, Intellect) for each participant. So how do we do this?\n\n**First, check the data (data object and codebook). What is going on here?** IPIP items are in data type <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='answer'>character</option><option value='x'>logical</option><option value='x'>factor</option></select> and there is <select class='webex-select'><option value='blank'></option><option value='x'>no</option><option value='answer'>some</option></select> reverse-scoring for the IPIP items.\n\n#### Step 1 {.unnumbered}\n\nSelect the Participant id and the items of the IPIP.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhp_ipip <- hp_data %>% \n  select(PP_ID, IPIP_01:IPIP_50)\n```\n:::\n\n\n#### Step 2 {.unnumbered}\n\nNext, items are in wide format which is not helpful. We need them in long format.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhp_ipip <- hp_ipip %>% \n  pivot_longer(cols = -PP_ID, # all coloumns apart from PP_ID\n               names_to = \"IPIP_items\",\n               values_to = \"IPIP_response\") \n```\n:::\n\n\n#### Step 3 {.unnumbered}\n\nNow, we need information which items are reverse-coded and modify how they are scored. We could code this ourselves like we did in **\\[LINK TO DATA SECTION IN CHAPTER 2\\]**, or we could take a shortcut since the information is already stored in the codebook.\n\nWe won't need all the info from codebook, so we need to select the relevant columns (`Questionnaire_Item`, `Forward- or Reverse-coded item`, `Dimension`) first before joining our `hp_ipip` with `codebook_reduced`. Retaining the Dimension will help later on with calculating scores for each subscale.\n\nNotice how there are spaces in the variable name `Forward- or Reverse-coded item` which R has to wrap in single backticks to be able to process. Maybe better to change that variable name to `FW_RV` during selection so that it won't give us a headache later on.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncodebook_reduced <- codebook %>% \n  select(Questionnaire_Item, FW_RV = `Forward- or Reverse-coded item`, Dimension)\n```\n:::\n\n\nNow we can join those 2 dataframes together using `left_join()` or an `inner_join()`, which means only information for the IPIP items will be considered.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhp_ipip_codebook <- left_join(hp_ipip, codebook_reduced)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n```\n:::\n:::\n\n\nOh, an error message. Meh. It says `x and y have no common variables`. Ohhh, because when we pivoted `hp_ipip`, we named the column with the IPIP items `IPIP_items` whereas information in `codebook_reduced` is stored in a column called `Questionnaire_Item`. To fix that, we could either\n\n-   change the column name in `hp_ipip` during pivoting, i.e., setting `names_to = \"Questionnaire_Item\"`\n-   change the column name in `codebook_reduced` during selection of the variables, i.e., `select(IPIP_items = Questionnaire_Item, etc.)` but that would only help us for IPIP items, not for the SD or the PVQ later on (so not really an option)\n-   use a workaround and define the different column names in the \"by\" argument\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhp_ipip_codebook <- left_join(hp_ipip, codebook_reduced, by = join_by(IPIP_items == Questionnaire_Item))\n\nglimpse(hp_ipip_codebook)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 49,400\nColumns: 5\n$ PP_ID         <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ IPIP_items    <chr> \"IPIP_01\", \"IPIP_02\", \"IPIP_03\", \"IPIP_04\", \"IPIP_05\", \"…\n$ IPIP_response <chr> \"moderately accurate\", \"very inaccurate\", \"moderately in…\n$ FW_RV         <chr> \"Forward\", \"Reverse\", \"Forward\", \"Reverse\", \"Forward\", \"…\n$ Dimension     <chr> \"Extraversion\", \"Agreeableness\", \"Conscientiousness\", \"E…\n```\n:::\n:::\n\n\n#### Step 4 {.unnumbered}\n\nNow it's getting tricky. Reverse-coding.\n\nWhat we need to do is:\n\n-   turn the character values into numbers and\n-   make sure that we the correct those numbers for the reverse-coded items\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhp_ipip_final <- hp_ipip_codebook %>% \n  # regardless of FW_RV item, we'll recode very inaccurate as 1, moderately inaccurate as 2, etc\n  mutate(IPIP_values = case_when(\n    IPIP_response == \"very inaccurate\" ~ 1,\n    IPIP_response == \"moderately inaccurate\" ~ 2,\n    IPIP_response == \"neither accurate nor inaccurate\" ~ 3,\n    IPIP_response == \"moderately accurate\" ~ 4,\n    IPIP_response == \"very accurate\" ~ 5,\n    .default = NA\n  )) %>% \n  # now we are reverse-scoring items. If it's a reverse coded item, we want the corrected score be 6 minus the IPIP_value\n  mutate(IPIP_values_corrected = case_when(\n    FW_RV == \"Reverse\" ~ 6-IPIP_values,\n    .default = IPIP_values\n  ))\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Check it worked\n\nAlways good to double check to see if it worked. Either look at it, or create an output with distinct values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistinct_values <- hp_ipip_final %>% \n  distinct(IPIP_response, FW_RV, IPIP_values_corrected) %>% \n  arrange(FW_RV, desc(IPIP_values_corrected))\n```\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Alternative solution\n\nWe took 2 steps above to turn character into numeric values and recode those according to whether they were reverse -scored. However, we could have done this in one step:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhp_ipip_final_v2 <- hp_ipip_codebook %>% \n  mutate(IPIP_values_corrected = case_when(\n    IPIP_response == \"very inaccurate\" & FW_RV == \"Forward\" ~ 1,\n    IPIP_response == \"moderately inaccurate\" & FW_RV == \"Forward\" ~ 2,\n    IPIP_response == \"moderately accurate\" & FW_RV == \"Forward\" ~ 4,\n    IPIP_response == \"very accurate\" & FW_RV == \"Forward\" ~ 5,\n    IPIP_response == \"neither accurate nor inaccurate\" ~ 3, ## doesn't need to be recoded because 3 is 3 for both FW and RV items\n    IPIP_response == \"very inaccurate\" & FW_RV == \"Reverse\" ~ 5,\n    IPIP_response == \"moderately inaccurate\" & FW_RV == \"Reverse\" ~ 4,\n    IPIP_response == \"moderately accurate\" & FW_RV == \"Reverse\" ~ 2,\n    IPIP_response == \"very accurate\" & FW_RV == \"Reverse\" ~ 1,\n    .default = NA\n  ))\n\ndistinct_values_v2 <- hp_ipip_final_v2 %>% \n  distinct(IPIP_response, FW_RV, IPIP_values_corrected) %>% \n  arrange(FW_RV, desc(IPIP_values_corrected))\n```\n:::\n\n:::\n\n#### Step 5 {.unnumbered}\n\nAccording to the paper, the IPIP scores are getting summed up for each of the dimensions. And we need to do this per participant.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary_IPIP <- hp_ipip_final %>% \n  group_by(PP_ID, Dimension) %>% \n  summarise(IPIP_score = sum(IPIP_values_corrected)) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'PP_ID'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n\n### SD3\n\n**Overall goal** for the SD3 questionnaire: We need to calculate an overall Score for the Dark Triad dimensions **Psychopathy** (lack of emotional warmth for others or empathy paired with sensation seeking, risk-taking behaviour, and lack of guilt), **Machiavellianism** (tendency to manipulate others for own gain), and **Narcissism** (exaggerated sense of grandiosity, importance, entitlement, and need to be admired) per participant.\n\n**First, check the data (data object and codebook). What is going on here?** SD items are in data type <select class='webex-select'><option value='blank'></option><option value='answer'>numeric</option><option value='x'>character</option><option value='x'>logical</option><option value='x'>factor</option></select> and there is <select class='webex-select'><option value='blank'></option><option value='x'>no</option><option value='answer'>some</option></select> reverse-scoring for the SD items.\n\n**So how do we achieve that?** Actually the steps are fairly similar to what we computed for the IPIP, apart from having to recode the values as numbers before being able to reverse-code them:\n\n-   Step 1: select PP_ID and all the questions related to the SD_questionnaires\n-   Step 2: pivot into long format\n-   Step 3: join with `codebook_reduced`\n-   Step 4: reverse_code the scores\n-   Step 5: calculate sums for each dimension\n\nKeep to the separate steps if this is more organised for you easier to keep track, but we are attempting this in a single pipe. Keep the solution hidden if you want to challenge yourself.\n\n::: {.callout-note collapse=\"true\"}\n## Data Wrangling code for SD3\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary_SD <- hp_data %>% \n  select(PP_ID, starts_with(\"SD\")) %>% # starts_with selects all column names that start with \"SD\"\n  pivot_longer(cols = -PP_ID, # all columns apart from PP_ID\n               names_to = \"Questionnaire_Item\", # smarter approach\n               values_to = \"SD_response\") %>% \n  left_join(codebook_reduced) %>% # now that the column names match across questionnaires, we don't need the by argument\n  mutate(SD_corrected = case_when(\n    FW_RV == \"Reverse\" ~ 6-SD_response,\n    .default = SD_response\n    )) %>% \n  group_by(PP_ID, Dimension) %>% \n  summarise(SD_score = sum(SD_corrected)) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Questionnaire_Item)`\n`summarise()` has grouped output by 'PP_ID'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n:::\n\n### PVQ-RR\n\n**Overall goal** for the PVQ-RR questionnaire: We need to calculate an overall score for each of the 12 dimensions per participant.\n\n**First, check the data (data object and codebook). What is going on here?** PVQ items are in data type <select class='webex-select'><option value='blank'></option><option value='answer'>numeric</option><option value='x'>character</option><option value='x'>logical</option><option value='x'>factor</option></select> and there is <select class='webex-select'><option value='blank'></option><option value='answer'>no</option><option value='x'>some</option></select> reverse-scoring for the SD items.\n\n**So how do we achieve that?** Actually this is more straightforward than data wrangling for the IPIP and the SD. We basically have to:\n\n-   Step 1: select PP_ID and all the questions related to the PVQ_questionnaires\n-   Step 2: pivot into long format\n-   Step 3: join with `codebook_reduced`\n-   Step 4: calculate sums for each dimension\n\nSimilar to SD, we attempt this in a single pipe. Feel free to try first before looking at the solution below.\n\n::: {.callout-note collapse=\"true\"}\n## Data Wrangling code for PVQ-RR\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary_PVQ <- hp_data %>% \n  select(PP_ID, starts_with(\"PVQ\")) %>% # starts_with selects all column names that start with \"PVQ\"\n  pivot_longer(cols = -PP_ID, # all columns apart from PP_ID\n               names_to = \"Questionnaire_Item\", # smarter approach\n               values_to = \"PVQ_response\") %>% \n  left_join(codebook_reduced) %>% # now that the column names match across questionnaires, we don't need the by argument\n  group_by(PP_ID, Dimension) %>% \n  summarise(PVQ_score = mean(PVQ_response)) %>% \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(Questionnaire_Item)`\n`summarise()` has grouped output by 'PP_ID'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n:::\n\nOne thing though: The Dimension column has the name of the PVQ category but also the abbreviation in brackets. We might want to tidy that up now before we start plotting. We can use the `separate()` function for that.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary_PVQ <- summary_PVQ %>% \n  separate(Dimension, into = c(\"Dimension\", NA), sep = \" \") # split column at the space character and keep Dimension and drop the second one (which would have been the abbreviation in brackets (XX))\n```\n:::\n\n\n## Which plot is the appropriate plot??? {#sec-appropriate-plot}\n\nAlright, let's get started with data visualisation, now that we have the data in a tidy format. Question is now, which one is the right plot for your data?\n\nDifferent types of data require different types of plots, so this comes back to how many variables are you aiming to plot and what kind of data type are they.\n\n### One categorical variable\n\n#### Barchart (`geom_bar()`)\n\nLet's say we want to count some demographics. To keep it simple, we want to show gender counts. We would use a **barplot** for it. This is done with `geom_bar()` in your third layer, and because the counting is done in the background, the `aes` only requires an x value (i.e. the name of your variable).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = gender)) +\n  geom_bar() \n```\n\n::: {.cell-output-display}\n![Default barchart](03-dataviz_files/figure-html/fig-bc-base-1.png){#fig-bc-base fig-align='center' width=100%}\n:::\n:::\n\n\nThis is the base plot done. You can customise it again by adding different layers. Some examples are in the tabs below.\n\n::: {.panel-tabset group=\"layers\"}\n## Colour\n\nWe can change the colour by adding a fill argument in the `aes()`. If we want to modify these colours further, we would add a `scale_fill_?` argument. If you have specific colours in mind, you would use `scale_fill_manual()` or if you want to stick with pre-dined ones, like viridis, use `scale_fill_viridis_d()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = gender, fill = gender)) +\n  geom_bar() +\n  # customise colour\n  scale_fill_viridis_d()\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Axes labels & margins\n\nNothing too \"off\" in this case, but given Female and Male are capitalised, we may want to tidy the axes labels a bit. There is also this gap between bottom of the chart and the bars which seems a bit weird. We can remove that with an `expansion()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = gender, fill = gender)) +\n  geom_bar() +\n  scale_fill_viridis_d() +\n  # changing labels v1 (with labs function, can add x and y)\n  labs(x = \"Gender\") + \n  scale_y_continuous(\n    # changing labels v2 (within the scale function, only deals with either x or y depending if it's scale_x or scale_y)\n    name = \"Count\",\n    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)\n    expand = expansion(mult = c(0, 0.05))\n  )\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Legend\n\nThe legend does not add any information because the labels are already provided on the x axis. We can remove the legend by adding the argument `guide = \"none\"` into the `scale_fill` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = gender, fill = gender)) +\n  geom_bar() +\n  scale_fill_viridis_d(\n    # remove the legend\n    guide = \"none\") +\n  labs(x = \"Gender\") + \n  scale_y_continuous(\n    name = \"Count\",\n    expand = expansion(mult = c(0, 0.05))\n  )\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Themes\n\nLet's experiment with the themes. For this plot we have chosen `theme_minimal()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = gender, fill = gender)) +\n  geom_bar() +\n  scale_fill_viridis_d(\n    guide = \"none\") +\n  labs(x = \"Gender\") + \n  scale_y_continuous(\n    name = \"Count\",\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  # pick a theme\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n#### Column plot (`geom_col()`)\n\nIf someone had already summarised those counts for you, you would not be able to use `geom_bar()`. In that case, you would switch to `geom_col()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngender_count <- hp_data %>% \n  count(gender)\n\ngender_count\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|gender |   n|\n|:------|---:|\n|Female | 819|\n|Male   | 169|\n\n</div>\n:::\n:::\n\n\nThe mapping for `geom_col()` requires both an **x** and a **y** aesthetics. In our example, x would be our categorical variable (e.g., `gender`), and y would be the column name that stored the values (`n`). Note how the base version has now n as an axis title (instead of count).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(gender_count, aes(x = gender, y = n, fill = gender)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![Column plot with different coloured bars](03-dataviz_files/figure-html/fig-col-1.png){#fig-col fig-align='center' width=100%}\n:::\n:::\n\n\n### Activity 5: Make the column plot pretty {.unnumbered}\n\nThe other layers to change the colour scheme, axes labels and margins, removing the legend and altering the theme require exactly the same functions as with the boxplot above. Test yourself to see if you could...\n\n-   [ ] change the colour scheme (e.g., viridis or [any other colour palettes](https://www.datanovia.com/en/blog/the-a-z-of-rcolorbrewer-palette/){target=\"_blank\"})\n-   [ ] remove the legend\n-   [ ] change the title of the x and y axes\n-   [ ] make the bars start directly on the x axis\n-   [ ] add a theme of your linking\n\n::: {.callout-tip collapse=\"true\"}\n## Possible solution code for the column plot (with a different colour palette and a different theme)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(gender_count, aes(x = gender, y = n, fill = gender)) +\n  geom_col() +\n  # replaced vidiris with the brewer palette\n  scale_fill_brewer(\n    palette = \"Set1\", # try \"Set2\" or \"Dark2\" for some variety\n    guide = \"none\") + # legend removed\n  # changing both x and y in labs\n  labs(x = \"Gender\", y = \"Count\") + \n  scale_y_continuous(\n    # starts bars on x axis without any gaps but leaves some space at the top (this time 10%)\n    expand = expansion(mult = c(0, 0.1)) \n  ) +\n  # different theme\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n### Two categorical variables\n\nLets have a look at the relationship between the houses participants being sorted into vs the house they wished they had been allocated to.\n\nPre-step: First, we'd need to wrangle the data a bit before we start building plots. When we look at the data, we see that a few people are actually managed to be sorted into more than one house. How is this even possible??? We only want those participants who only selected one house. Fortunately, all participants responded with one \"wish\" category, so nothing to fix there.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhp_houses <- hp_data %>% \n  select(PP_ID, Sorting_house, Sorting_house_wish) %>% \n  filter(Sorting_house %in% c(\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"))\n\nhead(hp_houses)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| PP_ID|Sorting_house |Sorting_house_wish |\n|-----:|:-------------|:------------------|\n|     1|Ravenclaw     |Ravenclaw          |\n|     2|Gryffindor    |Ravenclaw          |\n|     3|Gryffindor    |Ravenclaw          |\n|     4|Slytherin     |Slytherin          |\n|     5|Slytherin     |Hufflepuff         |\n|     6|Ravenclaw     |Ravenclaw          |\n\n</div>\n:::\n:::\n\n\nOne way to display that data is by creating a **Stacked barchart** (default option) or a **Percent stacked barchart**. For both options, the subgroups are displayed on top of each other. To show the two plots next to each other for better comparison, we moved the legend to the bottom of the chart and displayed the content across 2 rows.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Stacked barchart\nggplot(hp_houses, aes(x = Sorting_house, fill = Sorting_house_wish)) +\n  geom_bar() + # no position argument added\n  theme(legend.position = \"bottom\") + # move legend to the bottom\n  guides(fill = guide_legend(nrow = 2)) # display across 2 rows\n\n## Percent stacked barchart\nggplot(hp_houses, aes(x = Sorting_house, fill = Sorting_house_wish)) +\n  geom_bar(position = \"fill\") + # add position argument here\n  theme(legend.position = \"bottom\") + # move legend to the bottom\n  guides(fill = guide_legend(nrow = 2)) # display across 2 rows\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Stacked barchart (left), and Percent stacked barchart (right)](03-dataviz_files/figure-html/fig-barcharts_stacked-1.png){#fig-barcharts_stacked fig-align='center' width=100%}\n:::\n:::\n\n\nIn the **stacked barchart** (@fig-barcharts_stacked, left plot), you are able to plot participant numbers. Here we can see that `hp_houses` has a lot more participants who were sorted into Ravenclaw but also who wanted to be in Ravenclaw. We can also see that most participants were sorted into the houses they wished to be in, and that the lowest number of participants were sorted into Slytherin. However, we are having a tough time to see whether the ratio is the same across all 4 houses.\n\nIf we wanted to show that, a **Percent stacked barchart** (@fig-barcharts_stacked, right plot) would make a lot more sense. Now we would be able to observe that a higher proportion of Ravenclaw-hopefuls actually ended up in Ravenclaw compared to Gryffindor-hopefuls, Hufflepuff-hopefuls, and Slytherin-hopefuls getting sorted into Gryffindor, Hufflepuff, and Slytherin respectively. BUT! We would lose the information about the raw values in the sample.\n\n::: callout-note\nThe position argument `position = \"stack\"` is the default. Adding this argument to the code for the left plot in @fig-barcharts_stacked would produce the same plot a leaving the argument out.\n:::\n\nA second option is a **Grouped barchart** which displays the bars next to each other. We would achieve that by changing the position argument to **\"dogde\"**. You can see the default version of the plot in the @fig-barchart_grouped on the left, and one with more layers on the right.\n\nJakob et al. (2019) used the following HEX colours for their plots:\n\n-   Gryffindor #7F0909\n-   Hufflepuff #f0c75e\n-   Ravenclaw #08245e\n-   Slytherin #2a623d\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Default grouped barchart\nggplot(hp_houses, aes(x = Sorting_house, fill = Sorting_house_wish)) +\n  geom_bar(position = \"dodge\") + # add position argument here\n  theme(legend.position = \"bottom\") + # move legend to the bottom\n  guides(fill = guide_legend(nrow = 2)) # display across 2 rows\n\n## Prettier grouped barchart\nggplot(hp_houses, aes(x = Sorting_house, fill = Sorting_house_wish)) +\n  geom_bar(position = \"dodge\") + # add position argument here\n  # changing colours to Harry Potter House colours\n  scale_fill_manual(values = c('#7F0909', '#f0c75e', '#08245e', '#2a623d')) +\n  # changing labels for x, y, and fill\n  labs(x = \"House sorted into\", y = \"Count\", fill = \"House wished for\") + \n  scale_y_continuous(\n    # remove the space below the bars, but keep a tiny bit (5%) above\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  # pick a theme\n  theme_classic() + \n  theme(legend.position = \"bottom\") + # need to move this part to the end otherwise the `theme_*` overrides it\n  guides(fill = guide_legend(nrow = 2)) # display across 2 rows\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Default grouped barchart (left) and one with a few more layers added (right)](03-dataviz_files/figure-html/fig-barchart_grouped-1.png){#fig-barchart_grouped fig-align='center' width=100%}\n:::\n:::\n\n\nOne more thing we could have done is using `facet_wrap()` to split the different houses into their own subplots.\nNow we can compare better in which house participants were sorted into according to wish-houses categories. For example, people who have hoped for Gryffindor, were most likely sorted into Gryffindor, followed by Hufflepuff, Ravenclaw, and Slytherin. Slytherin-hopefuls were most likely to end up in Slytherin, followed by Ravenclaw, Gryffindor, and Hufflepuff.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_houses, aes(x = Sorting_house, fill = Sorting_house_wish)) +\n  geom_bar(position = \"dodge\") + \n  scale_fill_manual(values = c('#7F0909', '#f0c75e', '#08245e', '#2a623d')) +\n  labs(x = \"House sorted into\", y = \"Count\", fill = \"House wished for\") + \n  scale_y_continuous(\n    # remove the space below the bars, but keep a tiny bit (5%) above\n    expand = expansion(mult = c(0, 0.05))\n  ) +\n  # pick a theme\n  theme_classic() + \n  theme(legend.position = \"bottom\") + # need to move this part to the end otherwise the `theme_*` overrides it\n  facet_wrap(~Sorting_house_wish)\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### One continuous variable\n\n#### Histogram `geom_histogram()`\n\nIf you wanted to show the distribution of a continuous variable, you can use a histogram. As with every plot, you need at least 3 layers to create a base version of the plot. Similar to `geom_bar()`, `geom_histogram()` only requires an `x` variable.\n\nA histogram splits the data into “bins” (i.e., groupings displayed in a single bar). These values are plotted along the x-axis and shows the count of how many observations are in each bin along the y-axis. It's basically a bar chart for continuous variables.\n\nLet's have a look at the age distribution in our dataset.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![Default histogram](03-dataviz_files/figure-html/fig-hist-1.png){#fig-hist fig-align='center' width=100%}\n:::\n:::\n\n\n::: callout-important\n## warning message\n\nThe warning message tell us that 2 rows were removed because they contained non-finite values outside the scale range. If you have a closer look at the data, you can spot those 2 rows as missing values.\n:::\n\nThe default **bin number** is 30 (as displayed in @fig-hist above). Changing the number of bins (argument `bins`) can help to show more or less fine tuning in the data. Bigger numbers of bins means more finetuning.\n\nPerhaps it's more intuitive to modify the **width of each bin** instead via the argument (`binwidth`). So for example `binwidth = 1` for category age would mean 1 year of age per \"age group\"; `binwidth = 5` would mean 5 years of age span per \"age group\", etc. The plots below show modifications for both `bin` and `binwidth`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#less finetuning\nggplot(hp_data, aes(x = age)) +\n  geom_histogram(bins = 10) \n\n# more fineturning\nggplot(hp_data, aes(x = age)) +\n  geom_histogram(binwidth = 1) \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range (`stat_bin()`).\nRemoved 2 rows containing non-finite outside the scale range (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![Bins vs binwidth arguments](03-dataviz_files/figure-html/fig-bins-1.png){#fig-bins fig-align='center' width=100%}\n:::\n:::\n\n\nThe **warning message** telling us 2 row of data were removed due to containing `non-finite values outside the scale range`. Have a look at the age column in `hp_data` to see if you can decipher the warning message.\n\nThey were removed because <select class='webex-select'><option value='blank'></option><option value='x'>they fall outside of the plot range</option><option value='answer'>they contain missing values</option></select>.\n\nColours are getting manipulated slightly differently to the barchart. Click through each tab to see how you can alter colour, axes labels, margins and breaks, and add a different theme.\n\n::: {.panel-tabset group=\"layers\"}\n## Colour\n\nWe can change the plot colours by adding a **fill argument** and a **colour argument**. The `fill` argument manipulates the colour of the bars, and the `colour` argument changes the outline of the bars. Pay attention that they are **added directly to the `geom_histogram` arguments**, not the overall `aes()` like we did with the boxplot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\")\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: callout-tip\nYou could use hex codes for fill and color, like we used here, `geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\")`. If you want create your own colours, check out [this website](https://www.hexcolortool.com/){target=\"_blank\"}.\n\nor\n\nYou could use a pre-defined colour name `geom_histogram(binwidth = 1, fill = \"purple\", colour = \"green\")`. See a full list [here](https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/){target=\"_blank\"}\n:::\n\n## Axes labels, margins, and breaks\n\nHere we **removed the label** for the y axes (to show you some variety) and **modified the breaks**. The y axis is now displayed in increasing steps of 10 (rather than 30), and the x axis has 5-year increments rather than 10. The `expansion()` function works the same to the version we already encountered removing the gap between x axis and bars.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\") +\n  labs(x = \"Age (in years)\", # renaming x axis label\n       y = \"\") + # removing the y axis label\n  scale_y_continuous(\n    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)\n    expand = expansion(mult = c(0, 0.05)),\n    # changing break points on y axis\n    breaks = seq(from = 0, to = 120, by = 10),\n  ) +\n  scale_x_continuous(\n    # changing break points on x axis\n    breaks = seq(from = 10, to = 70, by = 5),\n  )\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Themes\n\nLet's experiment with the themes. For this plot we have chosen `theme_bw()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hp_data, aes(x = age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\") +\n  labs(x = \"Age (in years)\",\n       y = \"\") +\n  scale_y_continuous(\n    expand = expansion(mult = c(0, 0.05)),\n    breaks = seq(from = 0, to = 120, by = 10),\n  ) +\n  scale_x_continuous(\n    breaks = seq(from = 10, to = 70, by = 5),\n  ) +\n  # pick a theme\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-40-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n### One continuous and one categorical grouping variable\n\n#### Boxplot\n\n### Activity 6: Recreating a boxplot from Jakob et al. (2019) {.unnumbered}\n\nLet's try something different for the boxplot. Figure 1 in the paper shows a boxplot for the Personality traits across Houses. See below:\n\n![](images/Jakob_boxplot.PNG)\n\nLet's see if we can actually re-create this plot.\n\n#### Step 1: create a default boxplot {.unnumbered}\n\n`Personality Traits` is on the x axis and some sort of `average Score` is in the y axis. But hang on, They combined the Big 5 personality traits and the ones from the Dark Triads questionnaire. Hmmm. Our data doesn't look like that yet. Our values are scattered across 3 different dataframes. The personality data we need are in `summary_IPIP` the Dark Triad data are in `summary_SD`, and the information about which house the participants got sorted into is in `hp_data`.\n\n##### Pre-Steps {.unnumbered}\n\nTry to wrangle the data according to the steps below before looking at the solution.\n\n1.  We need information of the participant and which house they were sorted into. Think about where we would find the information and how to isolate it. Tidy that data up. Remember, there were participants who were sorted into more than one house, and we need to filter them out again.\n2.  combine the data from `summary_IPIP` and `summary_SD`. Think about what join to use to keep information from both dataframes. After this step, we should have 3 columns and 8 scores per participant. (hint: pay attention to the Score column names in both dataframes - this can be addressed in a variety of ways)\n3.  We need to merge the output from 2. with the demographics we extracted in step 1.\n4.  We also need to change one of the column names to \"Score\" if you have not addressed this in a previous step\n  \n\n::: {.callout-note collapse=\"true\"}\n## Solution to the data wrangling steps\n\n::: {.callout-note collapse=\"true\"}\n## Are you sure you want to reveal the solution?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 1. select PP_ID and selected_house from hp_data\ndemog <- hp_data %>% \n  select(PP_ID, Sorting_house) %>% \n  # use filter to focus on the people who selected 1 house only\n  filter(Sorting_house %in% c(\"Gryffindor\", \"Hufflepuff\", \"Ravenclaw\", \"Slytherin\"))\n\n# 2. combine the data from summary_IPIP and summary_SD\npersonality <- full_join(summary_IPIP, summary_SD, by = join_by(PP_ID, Dimension, IPIP_score == SD_score)) %>% \n  \n# 3. merge personality with demog\n  full_join(demog) %>% \n\n# 4. change column name to Score\n  rename(Score = IPIP_score)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(PP_ID)`\n```\n:::\n:::\n\n:::\n:::\n\nNow we can start out default boxplot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = personality, aes(x = Dimension, y = Score, fill = Sorting_house)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-42-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n#### Step 2: change the colours {.unnumbered}\n\nWe are still using the Hex colours defined by the Jakob et al. (2019).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = personality, aes(x = Dimension, y = Score, fill = Sorting_house)) +\n  geom_boxplot() + \n  scale_fill_manual(values = c('#7F0909', '#f0c75e', '#08245e', '#2a623d')) # change colours\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-43-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n#### Step 3: the colours look too strong, and legend is in the wrong position and does not want a category label {.unnumbered}\n\n-   To mute the colours slightly, we can define alpha within the `geom_boxplot()` making the plot colours more transparent. This took a bit of trial and error, but I think we are good with an alpha value of around .75 (or at least one my screen).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = personality, aes(x = Dimension, y = Score, fill = Sorting_house)) +\n  geom_boxplot(alpha = 0.75) + # add alpha here\n  scale_fill_manual(values = c('#7F0909', '#f0c75e', '#08245e', '#2a623d'),\n                    name = \"\") + # delete the fill variable's title\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](03-dataviz_files/figure-html/unnamed-chunk-44-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n#### Step 4: Remove grey background, the x axis needs attention and they have a plot title included {.unnumbered}\n\nLooks like `theme_classic()` to me. Remember we have to add `theme_classic()` before moving the `legend.position`, otherwise the legend will be back on the right.\n\nThe x axis has the wrong label and we need to replace some of the names as they are too long and the original authors abbreviated them. Relabelling the x axis title should be straightforward by now.\n\nBut what about the labels of the categories? Here, we can just add an argument to `scale_x_discrete()` that relabels the categories. This is all working because they are ordered alphabetically. For orders that you want to have displayed non-alphabetically, you might need to change the character variable into a factor in the data frame and re-order the labels there before plotting ***\\[add cross-ref for chapter 2\\]***.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = personality, aes(x = Dimension, y = Score, fill = Sorting_house)) +\n  geom_boxplot(alpha = 0.7) + # add alpha here\n  scale_fill_manual(values = c('#7F0909', '#f0c75e', '#08245e', '#2a623d'),\n                    name = \"\") + # delete the fill variable's title\n  scale_x_discrete(name = \"Personality Traits\",\n                   labels = c(\"Agreeabl.\", \"Conscient.\", \"EmStability\", \"Extraversion\", \"Intellect\", \"Machiav.\", \"Narcissism\", \"Psychopathy\")) +\n  ggtitle(\"Personality Traits across Houses\") +\n  theme_classic() + # remove grey background\n  theme(legend.position = \"top\",\n        plot.title = element_text(hjust = 0.5)) # centers the title (took quite a bit of digging how to do that)\n```\n\n::: {.cell-output-display}\n![Recreated boxplot](03-dataviz_files/figure-html/fig-recreated-1.png){#fig-recreated fig-align='center' width=100%}\n:::\n:::\n\n\nLooks about right.Maybe the outlier points are a bit bigger in the original plot, but I think we can let that slide.\n\n#### Violin-boxplots\n\nrewrite: PVQ data by categories and for faceting, merge with demog so we get the information about the houses participants were sorted into. We already created demog in one of the steps above, so we can reuse it straight away to join house information onto summary_PVQ\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary_PVQ <- left_join(summary_PVQ, demog) %>% \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(PP_ID)`\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = summary_PVQ, aes(x = Dimension, y = PVQ_score)) +\n  geom_violin() +\n  geom_boxplot() \n```\n\n::: {.cell-output-display}\n![default Violin boxplot](03-dataviz_files/figure-html/fig-vb-1.png){#fig-vb fig-align='center' width=100%}\n:::\n:::\n\n\nLet's see if we can make this plot pretty. We could\n\n* change the colour\n* change the width of the boxes. at the moment they are covering the violins\n* change the axes labels\n* change the breaks on the y axis\n* set the limits on the y axis from 0 to 6\n* dodge the axis labels on the x axis so they so they don't overlap\n* change the theme to classic\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = summary_PVQ, aes(x = Dimension, y = PVQ_score, fill = Dimension)) +\n  geom_violin(alpha = 0.5) + # alpha changes transparency\n  geom_boxplot(width = 0.25) + # change the width of the boxes\n  scale_fill_viridis_d(guide = \"none\", # remove the legend\n                       option = \"plasma\") + # changes colour scheme to viridis option plasma\n  scale_y_continuous(name = \"PVQ Score\", # change y axis label\n                     breaks = seq(from = 0, to = 6, by = 1), # change the breaks ticks on the y axis\n                     limits = c(0, 6)) + # min = 0, max = 6\n  scale_x_discrete(name = \"Human Values\",\n                   guide = guide_axis(n.dodge = 2)) + # want display labels in 2 rows\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![Pretty violin boxplot](03-dataviz_files/figure-html/fig-vb_pretty-1.png){#fig-vb_pretty fig-align='center' width=100%}\n:::\n:::\n\n\nIf we wanted to **add another grouping variable** to the mix, for example, Sorting_house, we can use `facet_wrap()` to create a separate plot for each level of variable we are separating by (in this case Dimension). For clarity, we should ...\n\n* re-define `x = Sorting_house` \n* change the fill variable - it makes more sense to have Sorting_house there\n* adjust the x axis label\n\n... so our plot shows a better comparison how the 4 houses compare for each human value dimension.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = summary_PVQ, aes(x = Sorting_house, y = PVQ_score, fill = Sorting_house)) +\n  geom_violin(alpha = 0.5) + # alpha changes transparency\n  geom_boxplot(width = 0.25) + # change the width of the boxes\n  scale_fill_viridis_d(guide = \"none\", # remove the legend\n                       option = \"plasma\") + # changes colour scheme to viridis option plasma\n  scale_y_continuous(name = \"PVQ Score\", # change y axis label\n                     breaks = seq(from = 0, to = 6, by = 1), # change the breaks ticks on the y axis\n                     limits = c(0, 6)) + # min = 0, max = 6\n  scale_x_discrete(name = \"Houses sorted into\",\n                   guide = guide_axis(n.dodge = 2)) + # want display labels in 2 rows\n  theme_classic() +\n  facet_wrap(~ Dimension) + # I want them in all on an individual rows otherwise their labels overlap again\n  theme(legend.position = \"bottom\") # move legend to the bottom\n```\n\n::: {.cell-output-display}\n![Pretty violin boxplot with facet_wrap](03-dataviz_files/figure-html/fig-vb_pretty_facet-1.png){#fig-vb_pretty_facet fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n### Two continuous\n\nscatterplot\n\ntrendlines straight line vs loess\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Save your plots\n\nYou can save your figures with the function `ggsave()`. It will save to your project folder\n\nThere are two ways you can use `ggsave()`. If you don't tell `ggsave()` which plot you want to save, by **default** it will **save the last plot you created**. If you have followed the steps above, your last plot would be the scatterplot from @fig-scatter\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(filename = \"scatterplot.png\")\n```\n:::\n\n\nThe second option is to save a plot as an object. As an example, let's save the boxplot we recreated from Jakob et al. (2019) above (@fig-recreated) as an object called `recreated_boxplot`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrecreated_boxplot <- ggplot(data = personality, aes(x = Dimension, y = Score, fill = Sorting_house)) +\n  geom_boxplot(alpha = 0.7) + # add alpha here\n  scale_fill_manual(values = c('#7F0909', '#f0c75e', '#08245e', '#2a623d'),\n                    name = \"\") + # delete the fill variable's title\n  scale_x_discrete(name = \"Personality Traits\",\n                   labels = c(\"Agreeabl.\", \"Conscient.\", \"EmStability\", \"Extraversion\", \"Intellect\", \"Machiav.\", \"Narcissism\", \"Psychopathy\")) +\n  ggtitle(\"Personality Traits across Houses\") +\n  theme_classic() + # remove grey background\n  theme(legend.position = \"top\",\n        plot.title = element_text(hjust = 0.5)) # centers the title (took quite a bit of digging how to do that)\n```\n:::\n\n\nThen you run the line\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(filename = \"recreated_boxplot.png\", \n       plot = recreated_boxplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n:::\n\n\nFilename is the name you want your png to be called, plot refers to the object name. \n\n\n::: {.callout-note collapse=\"true\"}\n\n## Our saved `recreated_boxplot.png` would look like this:\n\n![](recreated_boxplot.png)\n:::\n\nThat is with default settings. If you like it, keep it, but if you think it looks a bit \"stretched\", you can specify the width, the height, and the units (e.g., \"cm\", \"mm\", \"in\", \"px\" are possible). You might need to play about with the dimension before it feels right.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggsave(filename = \"recreated_boxplot2.png\", \n       plot = recreated_boxplot, \n       width = 16, height = 8, units = \"cm\")\n```\n:::\n\n\n\n\n::: {.callout-note collapse=\"true\"}\n\n## png with different dimensions\n\n![](recreated_boxplot2.png)\n:::\n\n\n## [Pair-coding in the lab]{style=\"color: #EBA347; text-transform: uppercase;\"} {.unnumbered}\n\nProvide a barchart, a violin-boxplot, and a scatterplot from the loneliness data and the students have to try and recreate one of those in the lab. If they are overly fast, they can do the other 2.\n\n## [Test your knowledge]{style=\"color: #EBA347; text-transform: uppercase;\"} {.unnumbered}\n\nWhich plot would you choose for\n",
    "supporting": [
      "03-dataviz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}