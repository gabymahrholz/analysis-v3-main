{
  "hash": "035df40501435c64c28ae8804f43b46d",
  "result": {
    "markdown": "# Data viz II {#sec-dataviz2}\n\n\n\n\n\n## Intended Learning Outcomes {.unnumbered}\n\nBy the end of this chapter you should be able to:\n\n-   choose an appropriate plot for continuous variables and a mix of continuous/categorical variables \n-   create a basic version of an appropriate plot\n-   apply extra layers to change the appearance of the plot\n\n## [Individual Walkthrough]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\nIn this chapter, we are continuing our journey of appropriate plots. Last week, we looked at which plots are appropriate for categorical variables. Today, we'll focus on continuous variables and which plots to choose with a mix of continuous and categorical variables.\n\n\n\n## Activity 1: Set-up and data for today\n\n-   We are still working with the data by Pownall et al. (2023) which we aggregated in @sec-wrangling. Open the project.\n-   You could use the same Rmd as last week if you want to keep all plotting in one document or create a new Rmd to separate plots for categorical and continuous variables. Up to you.\n-   The aggregated data is the same as last week. It should be in your project folder but in case it got lost, download it again and place it in your project folder: [data_prp_for_ch4.csv](data/data_prp_for_ch4.csv \"download\").\n-   If you need a reminder about the data and variables, have a look at the codebook and/or @sec-download_data_ch1.\n\n\n\n## Activity 2: Load in the libraries, read in the data, and tidy the dataframe\n\nWe need the package `tidyverse` today, and the data `data_prp_ch3.csv`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## packages \n???\n\n## data\ndata_prp_viz <- ???\n```\n:::\n\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndata_prp_viz <- read_csv(\"data_prp_for_ch4.csv\")\n```\n:::\n\n\n:::\n\n\n\n\n\n\n\n\nThis is the same as last week. We need to turn our categorical variables into factors to make plotting easier.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_prp_viz <- data_prp_viz %>% \n  mutate(Gender = factor(Gender,\n                         levels = c(2, 1, 3),\n                         labels = c(\"females\", \"males\", \"non-binary\")),\n         Secondyeargrade = factor(Secondyeargrade,\n                                  levels = c(1, 2, 3, 4, 5),\n                                  labels = c(\"≥ 70% (1st class grade)\", \"60-69% (2:1 grade)\", \"50-59% (2:2 grade)\", \"40-49% (3rd class)\", \"< 40%\")),\n         Plan_prereg = factor(Plan_prereg,\n                              levels = c(1, 3, 2),\n                              labels = c(\"Yes\", \"Unsure\", \"No\")),\n         Closely_follow = factor(Closely_follow,\n                                 levels = c(2, 3),\n                                 labels = c(\"Followed it somewhat\", \"Followed it exactly\")),\n         Research_exp = factor(Research_exp),\n         Pre_reg_group = factor(Pre_reg_group))\n```\n:::\n\n\n\n::: {.callout-tip}\n\nIf you are working within the same Rmd file as last week, you can skip these initial steps but you have to run the code you had already placed at the start of last-week's Rmd file to load tidyverse into the library, read in the data, and convert some of the variables into factors.\n\n:::\n\n\n## Continuing with Appropriate plots {.unnumbered}\n\n## One continuous variable\n\n### Histogram `geom_histogram()`\n\nIf you wanted to show the distribution of a continuous variable, you can use a histogram. As with every plot, you need at least 3 layers to create a base version of the plot. Similar to `geom_bar()`, `geom_histogram()` only requires an `x` variable as it does the counting \"in the background\".\n\nA histogram splits the data into “bins” (i.e., groupings displayed in a single bar). These values are plotted along the x-axis and shows the count of how many observations are in each bin along the y-axis. It's basically a bar chart for continuous variables.\n\nLet's have a look at the age distribution in our dataset.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![Default histogram](05-dataviz2_files/figure-html/fig-hist-1.png){#fig-hist fig-align='center' width=100%}\n:::\n:::\n\n\n\nThe default **bin number** is 30 (as displayed in @fig-hist above). Changing the number of bins (argument `bins`) can help to show more or less fine tuning in the data. Bigger numbers of bins means more finetuning.\n\nPerhaps it's more intuitive to modify the **width of each bin** instead via the argument (`binwidth`). So for example `binwidth = 1` for category age would mean 1 year of age per \"age group\"; `binwidth = 5` would mean 5 years of age span per \"age group\", etc. The plots below show modifications for both `bin` and `binwidth`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#less finetuning\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(bins = 10) \n\n# more fineturning\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1) \n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite outside the scale range (`stat_bin()`).\nRemoved 2 rows containing non-finite outside the scale range (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![Bins vs binwidth arguments](05-dataviz2_files/figure-html/fig-bins-1.png){#fig-bins fig-align='center' width=100%}\n:::\n:::\n\n\nThe **warning message** telling us 2 row of data were removed due to containing `non-finite values outside the scale range`. Have a look at the age column in `hp_data` to see if you can decipher the warning message.\n\nThey were removed because <select class='webex-select'><option value='blank'></option><option value='x'>they fall outside of the plot range</option><option value='answer'>they contain missing values</option></select>.\n\nColours are getting manipulated slightly differently to the barchart. Click through each tab to see how you can alter colour, axes labels, margins and breaks, and add a different theme.\n\n::: {.panel-tabset}\n\n## Colour\n\nWe can change the plot colours by adding a **fill argument** and a **colour argument**. The `fill` argument manipulates the colour of the bars, and the `colour` argument changes the outline of the bars. Pay attention that they are **added directly to the `geom_histogram` arguments**, not the overall `aes()` like we did with the boxplot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\")\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: callout-tip\n\nYou could use \n\n* hex codes for fill and color, like we used here, `geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\")`. If you want create your own colours, check out [this website](https://www.hexcolortool.com/){target=\"_blank\"}. OR\n* a pre-defined colour name `geom_histogram(binwidth = 1, fill = \"purple\", colour = \"green\")`. See a full list [here](https://www.datanovia.com/en/blog/awesome-list-of-657-r-color-names/){target=\"_blank\"} OR\n\n\n:::\n\n## Axes labels, margins, and breaks\n\nHere we **removed the label** for the y axes `Count` (to show you some variety) and **modified the breaks**. The y axis is now displayed in increasing steps of 5 (rather than 10), and the x axis has 1-year increments rather than 5. \n\nNotice how the `breaks =` argument manipulates the labels of the break ticks but not the limit of the scale. You can manipulate the limits of the scale with the `limits =` argument. To exaggerate, we set the limits to 15 and 50. See how the values for 15 to 19, and 44 to 50 do not have a label. You would need to adjust that in `breaks =` argument.\n\nThe `expansion()` function removes the gap between x axis and bars. It is exactly the same code as we used in @sec-dataviz .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\") +\n  labs(x = \"Age (in years)\", # renaming x axis label\n       y = \"\") + # removing the y axis label\n  scale_y_continuous(\n    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)\n    expand = expansion(mult = c(0, 0.05)),\n    # changing break points on y axis\n    breaks = seq(from = 0, to = 30, by = 5)\n    ) +\n  scale_x_continuous(\n    # changing break points on x axis\n    breaks = seq(from = 20, to = 43, by = 1),\n    # Experimenting with\n    limits = c(15, 50)\n    )\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Themes\n\nLet's experiment with the themes. For this plot we have chosen `theme_bw()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Age)) +\n  geom_histogram(binwidth = 1, fill = \"#586cfd\", colour = \"#FC58BE\") +\n  labs(x = \"Age (in years)\", # renaming x axis label\n       y = \"\") + # removing the y axis label\n  scale_y_continuous(\n    # remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)\n    expand = expansion(mult = c(0, 0.05)),\n    # changing break points on y axis\n    breaks = seq(from = 0, to = 30, by = 5)\n    ) +\n  scale_x_continuous(\n    # changing break points on x axis\n    breaks = seq(from = 19, to = 44, by = 1)\n    ) +\n  # pick a theme\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n\n## Two continuous variables\n\n### Scatterplot `geom_point()`\n\nWe want to display the relationship between Acceptance of QRPs at Time point 1 and 2. The default scatterplot would be created with `geom_point()`.\n\nWe could also add a trendline by adding `geom_smooth()`. The default trendline is `loess`. If you want a linear trendline, you would need to add `method = lm` into `geom_smooth()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point() +\n  geom_smooth()\n\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point() +\n  geom_smooth(method = lm)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![Default Scatterplot with added trendline - loess (left) and linear (right)](05-dataviz2_files/figure-html/fig-scatter-1.png){#fig-scatter fig-align='center' width=100%}\n:::\n:::\n\n\n\n\nCustomising the colour of plot is slightly different to the other plots we've encountered so far. Technically, the point is not a \"filled-in black area\", but an extremely wide outline of a circle. Therefore, we cannot use the usual `fill` argument, but have to switch to the `colour` argument (like we did for the outline of the histogram).\n\n\n::: {.panel-tabset}\n\n## Colour for all points\n\nIf we want to **change the colour of all the points**, we would add the `colour` argument to the `geom_point() function`. Likewise, changing the **colour of the trendline** would also require a `colour` argument. Here we went with pre-defined colour names, but HEX codes would work too\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# colour of all points and the trendline\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean)) +\n  geom_point(colour = 'magenta') +\n  geom_smooth(method = lm, colour = 'turquoise')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Colour with grouping\n\nIf we wanted the points to **change colour due to another grouping variable**, the colour argument would go into the `aes()` If you don't want to define the colours manually, use a colour palette like brewer (`scale_colour_brewer()`) or viridis (`scale_colour_viridis_d()`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## adding grouping variable Pre_reg_group and changing the colour values manually\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n## Legend title and labels\n\nYou can tidy the legend title and group labels via the `scale_colour_?` function\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'),\n                      name = \"Pre-registered Dissertation\",\n                      labels = c(\"Yes\", \"No\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n::: {.callout-note collapse=\"false\" icon=\"false\"} \n\n## Your Turn\n\nAll other layers would be exactly the same as in other plots. Try to add layers to the make the plot above prettier: \n\n1. relabel axes x and y\n2. set the x and y axis range from 1 to 7\n3. move the legend to a different position (either top, left, or bottom)\n4. add a theme\n\n\n::: {.callout-note collapse=\"true\" icon=\"false\"} \n\n## Hints\n\n1. can be done in 2 different ways - labs() or scale_x_?\n2. we did that for the histogram\n3. We did that for the bar charts\n4. pick a theme you like\n\n:::\n\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = QRPs_Acceptance_Time1_mean, y = QRPs_Acceptance_Time2_mean, colour = Pre_reg_group)) +\n  geom_point() +\n  geom_smooth(method = lm) +\n  scale_colour_manual(values = c('mediumvioletred', 'steelblue1'),\n                      name = \"Pre-registered Dissertation\",\n                      labels = c(\"Yes\", \"No\")) +\n  labs (x = \"Acceptance of Questionable Research Practices (Time 1)\", \n        y = \"Acceptance of Questionable Research Practices (Time 2)\") +\n  theme_light() + # place before moving the legend position\n  theme(legend.position = \"top\") # move legend to the top\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::\n\n:::\n\n\n\n\n## Continuous with categorical grouping variable\n\n### Boxplot\n\nWe want to create a boxplot to investigate whether their understanding of open science depends on whether or not students had research experience. Our default boxplot would look like this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# default boxplot\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nTada. As usual, we can make the plot pretty by adding various layers. Click on the tabs to see how\n\n\n::: {.panel-tabset}\n\n## Colour\n\nWe can change the colour by adding a fill argument in the `aes()`. If we want to modify these colours further, we would add a `scale_fill_?` layer If you have specific colours in mind, you would use `scale_fill_manual()` or if you want to stick with pre-defined ones, like brewer `scale_fill_brewer()`.\n\nBtw, this is exactly the same code we used for the barcharts.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +\n  geom_boxplot() +\n  # customise colour\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Axes labels\n\nWe need to relabel the axes labels for x and y with `scale_x_discrete()` and `scale_y_continuous()`. We can also tidy the labels for the groups and the breaks on the y-axis (in steps of 1 rather than 2) within the same functions\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_x_discrete(\n    # changing the label of x\n    name = \"Research Experience\",\n    # changing the group labels of the 2 groups\n    labels = c(\"Yes\", \"No\")) + \n  scale_y_continuous(\n    # changing name of the y axis\n    name = \"Confidence in Understanding Open Science (Time 1)\",\n    # changing break labels\n    breaks = c(seq(from = 1, to = 7, by = 1))\n  )\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Legend and Theme\n\nThe legend is superfluous; best to take it off. As before, we can remove the legend by adding the argument `guide = \"none\"` into the `scale_fill` function.\n\nLet's pick a theme we haven't used yet: `theme_dark()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Research_exp, y = Time1_Understanding_OS, fill = Research_exp)) +\n  geom_boxplot() +\n  scale_fill_brewer(palette = \"Dark2\",\n                    # removing the legend\n                    guide = \"none\") +\n  scale_x_discrete(\n    name = \"Research Experience\",\n    labels = c(\"Yes\", \"No\")) + \n  scale_y_continuous(\n    name = \"Confidence in Understanding Open Science (Time 1)\",\n    breaks = c(seq(from = 1, to = 7, by = 1))\n  ) +\n  # pick a theme\n  theme_dark()\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n\n\n\n### Violin plot\n\nWe want to create a violin plot to investigate whether the perception of supervisor support depended on planning to pre-register the dissertation. Our default violin plot would look like this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# default boxplot\nggplot(data_prp_viz, aes(x = Plan_prereg, y = Mean_Supervisor_Support)) +\n  geom_violin()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\" icon=\"false\"} \n\n## Your Turn\n\nAdjusting the violin plot would be exactly the same as the boxplot. Try to add layers to the base plot above to \n\n* [ ] change the colours either manually or using a pre-defined colour palette \n* [ ] tidy the axes labels and group names\n* [ ] in case a legend appears, take it off\n* [ ] add a theme\n\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## One possible Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Plan_prereg, y = Mean_Supervisor_Support, fill = Plan_prereg)) +\n  geom_violin() +\n  scale_fill_manual(values = c('mediumspringgreen', 'orangered', 'slateblue'),\n                    # removing the legend\n                    guide = \"none\") +\n  scale_x_discrete(name = \"Plan to pre-register the dissertation\") + \n  scale_y_continuous(\n    name = \"Perceived Supervisory Support\",\n    breaks = c(seq(from = 1, to = 7, by = 1))\n  ) +\n  # pick a theme\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_ydensity()`).\n```\n:::\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n:::\n\n\n### Violin-boxplots\n\nSo far, we've only added one `geom_` to our plots. Due to the layered system, we could add multiple geoms, for example, when creating a violin-boxplot. \n\nRemember, the order of the layers makes a difference sometimes. We've seen already, with themes we added at the very end that could override the argument for a legend position earlier. Here, `ggplot + violinplot + boxplot` looks different to `ggplot + boxplot + violinplot`.\n\nLet's take the example of QRPs at timepoint 2 and a grouping variable of Second-year Grade.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_violin() +\n  geom_boxplot()\n\n\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_boxplot() +\n  geom_violin()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Default violin-boxplot: Order of the layer matters](05-dataviz2_files/figure-html/fig-vb_bv-1.png){#fig-vb_bv fig-align='center' width=100%}\n:::\n:::\n\n\n\nCustomising a few elements such as width of the boxes and the colour.\n\n\n::: {.panel-tabset}\n\n## Width of the boxes\n\nIf we want to get any information from the boxplot, we need to use order 1. But still, the boxplot is pretty wide and covers up important information from the violin. We could **adjust the width of the boxes** to make information more visible. This takes a bit of trial and error which width looks appropriate.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean)) +\n  geom_violin() +\n  geom_boxplot(width = 0.2)\n```\n\n::: {.cell-output-display}\n![Default violin-boxplot: adjusting width of the box](05-dataviz2_files/figure-html/fig-vb_width-1.png){#fig-vb_width fig-align='center' width=100%}\n:::\n:::\n\n\n## Colour\n\nAdding colour should be pretty straight forward by now. This code is no different to the one we used in the boxplot or violin plot. We need to add the `fill` argument within the `aes()`, and a `scale_fill_?`layer.\n\nHowever, we can modify this further by adding an opacity argument `alpha` to the violin plot geom.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +\n  geom_violin(alpha = 0.4) + # alpha for opacity\n  geom_boxplot(width = 0.2) + # change width of the boxes\n  scale_fill_brewer(palette = \"RdPu\") # customise colour\n```\n\n::: {.cell-output-display}\n![Violin-boxplot with a different colour palette](05-dataviz2_files/figure-html/fig-vb_colour-1.png){#fig-vb_colour fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n## Your Turn\n\n* Change the x- and y-axis labels\n* Remove the legend\n* add a theme\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"} \n\n## One possible Solution \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +\n  geom_violin(alpha = 0.4) +\n  geom_boxplot(width = 0.2) +\n  scale_fill_brewer(palette = \"RdPu\",\n                    guide = \"none\") + # removes the legend\n  # change labels of x and y\n  labs (x = \"Second-year Grade\", y = \"Acceptance of Questionable Research Practices (Time 2)\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=100%}\n:::\n:::\n\n:::\n\n:::\n\n\n## Faceting - adding another grouping variable\n\nFaceting is really useful when you have subsets in the data. We will use this here on the violin-boxplot from above, but you could add this to pretty much any plot. The function to split up the plots into facets is called `facet_wrap()`. \n\nLet's **add another grouping variable**, `Pre_reg_group`, so we can see separate plots for the yes and no groups. \n\nSince the group labels on the x-axis are quite long, we need to adjust them. Adding `guide = guide_axis(n.dodge = 2)` to the `scale_x_discrete()` function helps to display labels across multiple rows.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_prp_viz, aes(x = Secondyeargrade, y = QRPs_Acceptance_Time2_mean, fill = Secondyeargrade)) +\n  geom_violin(alpha = 0.5) +\n  geom_boxplot(width = 0.2) +\n  scale_fill_brewer(palette = \"RdPu\",\n                    guide = \"none\") + \n  labs (x = \"Second-year Grade\", y = \"Acceptance of Questionable Research Practices (Time 2)\") +\n  theme_classic() +\n  facet_wrap(~Pre_reg_group) + # faceting to split into subplots for yes and no\n  scale_x_discrete(guide = guide_axis(n.dodge = 2)) # want display labels in 2 rows\n```\n\n::: {.cell-output-display}\n![Pretty violin-boxplot split into pre-registration groups (yes and no)](05-dataviz2_files/figure-html/fig-vb_pretty_facet-1.png){#fig-vb_pretty_facet fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-tip}\n\nThe labels of `Pre_reg_group` are displayed as numbers 1 and 2. If this bugs you, fix the labels in the dataset. This would be less hassle than trying to fix it in the plot.\n\n:::\n\n\n\n::: {.callout-tip collapse=\"true\" icon=\"false\"}\n\n## Special case: Variables with subscales\n\nFor example, we want to show the relationship between  SATs scores at timepoints 1 and 2, separately for all 4 subscales of the SATs questionnaires, we would need to wrangle the data first. The dataframe we need should look like this:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(data_facet, n=5)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Code |Subscale            |    Time1|    Time2|\n|:----|:-------------------|--------:|--------:|\n|Tr10 |Affect              | 4.000000| 3.500000|\n|Tr10 |CognitiveCompetence | 5.166667| 4.166667|\n|Tr10 |Value               | 6.000000| 3.000000|\n|Tr10 |Difficulty          | 3.571429| 2.857143|\n|Bi07 |Affect              | 3.833333| 3.166667|\n\n</div>\n:::\n:::\n\n\nTry wrangling the data so that it looks like `data_facet` above\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n\n## Hints\n\n* step 1: select variables of interest\n* step 2: pivot\n* step 3: try to access information on subscales and timepoints from the variable names\n* step 4: pivot in the other direction\n\n::: {.callout-caution collapse=\"true\" icon=\"false\"}\n\n## Solution\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_facet <- data_prp_viz %>% \n  select(Code, starts_with(\"SATS\")) %>% \n  pivot_longer(cols = starts_with(\"SATS\"), names_to = \"Variable\", values_to = \"Mean_Scores\") %>% \n  separate(Variable, into = c(NA, \"Subscale\", \"Timepoint\", NA), sep = \"_\") %>% \n  pivot_wider(names_from = Timepoint, values_from = Mean_Scores)\n```\n:::\n\n\n:::\n\n:::\n\nThen we can build a scatterplot with facets for the subscales\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data_facet, aes(x = Time1, y = Time2)) +\n  geom_point() +\n  facet_wrap(~Subscale)\n```\n\n::: {.cell-output-display}\n![](05-dataviz2_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n\n\n\n## [Pair-coding]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\nProvide a barchart, a violin-boxplot, and a scatterplot from the loneliness data and the students have to try and recreate one of those in the lab. If they are overly fast, they can do the other 2.\n\n\n\n\n\n\n\n## [Test your knowledge on Chapters 3 and 4]{style=\"color: #F39C12; text-transform: uppercase;\"} {.unnumbered}\n\nWhich plot would you choose for\n\n\n\n\n",
    "supporting": [
      "05-dataviz2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}