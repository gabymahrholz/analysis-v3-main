simon_effect %>% group_by(similarity) %>%
summarise(count = n(), median = median(simon_effect))
simon_effect %>% group_by(similarity) %>%
summarise(median = median(simon_effect))
34.44134	- 35.68470
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox_test(simon_effect, simon_effect ~ similarity)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox_effsize(data = one_sample, wemwbs_sum~ 1, mu = 53.0)
wilcox_effsize(data = one_sample, wemwbs_sum, mu = 53.0)
wilcox_effsize(data = simon_effect, formula = simon_effect ~ similarity)
wilcoxonOneSampleR(one_sample$wemwbs_sum, mu = 53.0, digits = 3)
wilcox_effsize(data = one_sample, formula = wemwbs_sum ~ 1)
wilcox_effsize(data = one_sample, formula = wemwbs_sum ~ 1, mu = 53.0)
wilcoxonOneSampleR(one_sample$wemwbs_sum, mu = 53.0, digits = 3)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
age_distinct <- data_prp %>%
distinct(Age)
age_distinct
age_distinct
data_prp <- data_prp %>%
mutate(Age = parse_number(Age))
typeof(data_prp$Age) # fixed
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) # standard deviation of age
demo_total
demo_by_gender <- data_prp %>%
group_by(Gender) %>% # split data up into groups (here Gender)
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
# n from the line above divided by n from demo_total *100
percentage = n/demo_total$n *100,
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
qrp_t1 <- data_prp %>%
#Step 1
select(Code, QRPs_1_Time1:QRPs_11_Time1) %>%
# Step 2
pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores") %>%
# Step 3
group_by(Code) %>% # grouping py participant id
summarise(QRPs_Acceptance_Time1_mean = mean(Scores)) %>% # calculating the average Score
ungroup() # just make it a habit
qrp_step1 <- data_prp %>%
select(Code, QRPs_1_Time1:QRPs_11_Time1)
# show first 5 rows of qrp_step1
head(qrp_step1, n = 5)
qrp_step2 <- qrp_step1 %>%
pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores")
# show first 15 rows of qrp_step2
head(qrp_step2, n = 15)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
age_distinct <- data_prp %>%
distinct(Age)
age_distinct
age_distinct
data_prp <- data_prp %>%
mutate(Age = parse_number(Age))
typeof(data_prp$Age) # fixed
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
age_distinct <- data_prp %>%
distinct(Age)
age_distinct
age_distinct
data_prp <- data_prp %>%
mutate(Age = parse_number(Age))
typeof(data_prp$Age) # fixed
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) # standard deviation of age
demo_total
demo_by_gender <- data_prp %>%
group_by(Gender) %>% # split data up into groups (here Gender)
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
# n from the line above divided by n from demo_total *100
percentage = n/demo_total$n *100,
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
qrp_t1 <- data_prp %>%
#Step 1
select(Code, QRPs_1_Time1:QRPs_11_Time1) %>%
# Step 2
pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores") %>%
# Step 3
group_by(Code) %>% # grouping py participant id
summarise(QRPs_Acceptance_Time1_mean = mean(Scores)) %>% # calculating the average Score
ungroup() # just make it a habit
qrp_step1 <- data_prp %>%
select(Code, QRPs_1_Time1:QRPs_11_Time1)
# show first 5 rows of qrp_step1
head(qrp_step1, n = 5)
qrp_step2 <- qrp_step1 %>%
pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores")
# show first 15 rows of qrp_step2
head(qrp_step2, n = 15)
write_csv(data_prp, "data_prp.csv")
write_csv(qrp_t1, "qrp_t1.csv")
data_prp <- read_csv("data/prp_data_reduced.csv")
qrp_t1 <- read_csv("ddata/qrp_t1.csv")
qrp_t1 <- read_csv("data/qrp_t1.csv")
View(qrp_t1)
View(data_prp)
View(data_prp)
knitr::include_graphics("images/default_highlighted.png")
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
glimpse(data_prp)
spec(data_prp)
typeof(1)
typeof(1L)
typeof("1")
typeof("text")
1+1
"1"+"1" # ERROR
data_quiz <- data_prp %>%
select(Code, Age, Gender, Ethnicity, Secondyeargrade, QRP_item = QRPs_3_Time1, QRPs_mean = QRPs_Acceptance_Time2_mean, Understanding_item = Understanding_OS_1_Time1) %>%
mutate(Gender = factor(Gender),
Secondyeargrade = factor(Secondyeargrade,
levels = c(1, 2, 3, 4, 5),
labels = c("â‰¥ 70% (1st class grade)", "60-69% (2:1 grade)", "50-59% (2:2 grade)", "40-49% (3rd class)", "< 40%")),
`QRP_item > 4` = case_when(
QRP_item > 4 ~ TRUE,
.default = FALSE))
# the `head()` function shows the first n number of rows of a dataset (here 5)
head(data_quiz, n = 5)
glimpse(data_quiz)
# variable type
con <- c(answer = "continuous", x = "nominal", x = "ordinal")
nom <- c(x = "continuous", answer = "nominal", x = "ordinal")
ord <- c(x = "continuous", x = "nominal", answer = "ordinal")
# data type
num <- c(answer = "numeric", x = "character", x = "logical", x = "factor")
chr <- c(x = "numeric", answer = "character", x = "logical", x = "factor")
log <- c(x = "numeric", x = "character", answer = "logical", x = "factor")
fctr <- c(x = "numeric", x = "character", x = "logical", answer = "factor")
data_prp <- read_csv("data/prp_data_reduced.csv")
View(data_prp)
library(pwr)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(rstatix)
library(tidyverse)
library(car)
library(lsr)
library(pwr)
zwaan_data <- read_csv("data/MeansSimonTask.csv")
zwaan_demo <- read_csv("data/DemoSimonTask.csv")
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
head(simon_effect, n = 5)
descriptives <- simon_effect %>%
group_by(similarity) %>%
summarise(mean_RT = mean(simon_effect),
sd_RT = sd(simon_effect))
descriptives
ggplot(simon_effect, aes(x = similarity, y = simon_effect, fill = similarity)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4, alpha = 0.8) +
scale_fill_viridis_d(guide = "none") +
theme_classic() +
labs(x = "Similarity", y = "Simon effect")
leveneTest(simon_effect ~ similarity, data = simon_effect)
## same group
same <- simon_effect %>%
filter(similarity == "same")
shapiro.test(same$simon_effect)
## different group
different <- simon_effect %>%
filter(similarity == "different")
shapiro.test(different$simon_effect)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = FALSE)
t.test(simon_effect ~ similarity, data = simon_effect, alternative = "two.sided", var.equal = FALSE)
t.test(simon_effect ~ similarity, data = simon_effect, alternative = "less", var.equal = FALSE)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = FALSE)
t.test(one_sample$wemwbs_sum, mu = 51.0, alternative = "two.sided")
library(patchwork)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
library(lsr)
library(scales)
library(qqplotr)
library(car)
library(pwr)
library(rcompanion)
data_ballou <- read_csv("data/data_ballou_reduced.csv")
data_wemwbs <- data_ballou %>%
pivot_longer(cols = wemwbs_1:wemwbs_14, names_to = "Questions", values_to = "Scores") %>%
group_by(pid) %>%
summarise(wemwbs_sum = sum(Scores))
data_ballou <- data_ballou %>%
mutate(gender = factor(gender,
levels = c("Woman", "Man", "Non-binary")),
eduLevel = factor(eduLevel,
levels = c("Completed Secondary School", "Some University but no degree", "University Bachelors Degree", "Vocational or Similar", "Graduate or professional degree (MA, MS, MBA, PhD, etc)"))) %>%
left_join(data_wemwbs)
chi_square <- data_ballou %>%
select(pid, gender, eduLevel)
chi_square_frequency <- chi_square %>%
count(gender, eduLevel) %>%
pivot_wider(names_from = eduLevel, values_from = n)
chi_square_frequency
ggplot(chi_square, aes(x = eduLevel, fill = gender)) +
geom_bar(position = "dodge") +
scale_fill_viridis_d(name = "Gender") +
scale_x_discrete(name = "Level of Education",
labels = label_wrap(12)) +
scale_y_continuous(name = "Count") +
theme_classic()
chi_square_df <- as.data.frame(chi_square)
associationTest(formula = ~ eduLevel + gender, data = chi_square_df)
one_sample <- data_ballou %>%
select(pid, wemwbs_sum)
descriptives <- one_sample %>%
summarise(mean_wemwbs = mean(wemwbs_sum),
sd = sd(wemwbs_sum))
descriptives
ggplot(one_sample, aes(x = "", y = wemwbs_sum)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
theme_classic() +
labs(x = "",
y = "Total WEMWBS Scores")
ggplot(one_sample, aes(x = wemwbs_sum)) +
geom_histogram(binwidth = 1, fill = "magenta")
ggplot(one_sample, aes(x = wemwbs_sum)) +
geom_density(fill = "magenta")
# Version 1 with the car package
qqPlot(one_sample$wemwbs_sum)
# Version 2 with package qqplotr
ggplot(one_sample, aes(sample = wemwbs_sum)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point()
shapiro.test(one_sample$wemwbs_sum)
t.test(one_sample$wemwbs_sum, mu = 51.0, alternative = "two.sided")
pwr.t2n.test(n1 = 80, n2= 80, sig.level = 0.05, power = 0.8, alternative = "two.sided")
pwr.t.test(n = 80, sig.level = 0.05, power = 0.8, type = "two.sample", alternative = "two.sided")
comp_b
library(tidyverse)
library(palmerpenguins)
library(patchwork)
# Layers
# https://intro2r.com/the-start-of-the-end.html
head(penguins)
ggplot()
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm))
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point()
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
# changes colour palette
scale_colour_brewer(palette = "Dark2") +
# add breaks from 2500 to 6500 in increasing steps of 500
scale_x_continuous(breaks = seq(from = 2500, to = 6500, by = 500))
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
# split main plot up into different subplots by species
facet_wrap(~ species)
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
facet_wrap(~ species) +
# limits the range of the y axis
coord_cartesian(ylim = c(0, 250))
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
facet_wrap(~ species) +
labs(x = "Body Mass (in g)", # labels the x axis
y = "Flipper length (in mm)", # labels the y axis
colour = "Sex") # labels the grouping variable in the legend
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
facet_wrap(~ species) +
labs(x = "Body Mass (in g)",
y = "Flipper length (in mm)",
colour = "Sex") +
# add a theme
theme_classic()
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp_viz <- read_csv("data/data_prp_for_ch4.csv")
glimpse(data_prp_viz)
data_prp_viz <- data_prp_viz %>%
mutate(Gender = factor(Gender,
levels = c(2, 1, 3),
labels = c("females", "males", "non-binary")),
Secondyeargrade = factor(Secondyeargrade,
levels = c(1, 2, 3, 4, 5),
labels = c("â‰¥ 70% (1st class grade)", "60-69% (2:1 grade)", "50-59% (2:2 grade)", "40-49% (3rd class)", "< 40%")),
Plan_prereg = factor(Plan_prereg,
levels = c(1, 3, 2),
labels = c("Yes", "Unsure", "No")),
Closely_follow = factor(Closely_follow,
levels = c(2, 3),
labels = c("Followed it somewhat", "Followed it exactly")),
Research_exp = factor(Research_exp),
Pre_reg_group = factor(Pre_reg_group))
ggplot(data_prp_viz, aes(x = Gender)) +
geom_bar()
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
# customise colour
scale_fill_viridis_d()
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
scale_fill_viridis_d() +
# changing group labels on the breaks of the x axis
scale_x_discrete(labels = c("Female", "Male", "Non-Binary")) +
scale_y_continuous(
# changing name of the y axis
name = "Count",
# remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)
expand = expansion(mult = c(0, 0.05))
)
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
scale_fill_viridis_d(
# remove the legend
guide = "none") +
scale_x_discrete(labels = c("Female", "Male", "Non-Binary")) +
scale_y_continuous(
name = "Count",
expand = expansion(mult = c(0, 0.05))
)
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
scale_fill_viridis_d(
guide = "none") +
scale_x_discrete(labels = c("Female", "Male", "Non-Binary")) +
scale_y_continuous(
name = "Count",
expand = expansion(mult = c(0, 0.05))
) +
# pick a theme
theme_minimal()
gender_count <- data_prp_viz %>%
count(Gender)
gender_count
ggplot(gender_count, aes(x = Gender, y = n, fill = Gender)) +
geom_col()
ggplot(gender_count, aes(x = Gender, y = n, fill = Gender)) +
geom_col() +
# replaced vidiris with the brewer palette
scale_fill_brewer(
palette = "Set1", # try "Set2" or "Dark2" for some variety
guide = "none") + # legend removed
# labels of the categories changed
scale_x_discrete(labels = c("Male", "Female", "Non-Binary")) +
scale_y_continuous(
# change y axis label
name = "Count",
# starts bars on x axis without any gaps but leaves some space at the top (this time 10%)
expand = expansion(mult = c(0, 0.1))
) +
# different theme
theme_light()
## Stacked barchart
bc_stacked <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar() + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 1)) # display across 2 rows
## Percent stacked barchart
bc_percent <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar(position = "fill") + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 1)) # display across 2 rows
bc_stacked + bc_percent + plot_layout(nrow = 1)
gbc_default <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar(position = "dodge") + # add position argument here
theme(legend.position = "bottom") # move legend to the bottom
## Prettier grouped barchart
gbc_pretty <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar(position = "dodge") + # add position argument here
# changing labels for x, y, and fill category - alternative method
labs(x = "Pre-registration planned", y = "Count", fill = "Pre-registered dissertation") +
# manual colour change for values
scale_fill_manual(values = c('#648FFF', '#DC267F'),
labels = c("Yes", "No")) +
scale_y_continuous(
# remove the space below the bars, but keep a tiny bit (5%) above
expand = expansion(mult = c(0, 0.05))
) +
# pick a theme
theme_classic() +
# need to move this following line to the end otherwise the `theme_*` overrides it
theme(legend.position = "bottom") +
# display across 2 rows
guides(fill = guide_legend(nrow = 2))
gbc_default + gbc_pretty + plot_layout(nrow = 1)
gbc_default <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "dodge") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3)) # display across 3 rows
## Prettier grouped barchart with missing values
gbc_pretty <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "dodge") +
labs(x = "Pre-registration planned", y = "Count", fill = "Pre-registration followed") +
# manual colour change for values of the factor and the NA responses
scale_fill_manual(values = c('#648FFF', '#DC267F'), na.value = '#FFB000') +
scale_y_continuous(
expand = expansion(mult = c(0, 0.05))
) +
theme_classic() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3)) # display across 3 rows
gbc_default + gbc_pretty + plot_layout(nrow = 1)
# remove NA
prereg_plan_follow <- data_prp_viz %>%
select(Code, Plan_prereg, Closely_follow) %>%
drop_na(Closely_follow)
# check NA have been removed
prereg_plan_follow %>%
distinct(Plan_prereg, Closely_follow) %>%
arrange(Plan_prereg, Closely_follow)
# with NA
comp_a <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "fill") + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 2)) # display across 2 rows
# without NA
comp_b <- ggplot(prereg_plan_follow, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "fill") + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 2)) # display across 2 rows
comp_a + comp_b + plot_layout(nrow = 1)
comp_b
