theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 2)) # display across 2 rows
comp_a + comp_b + plot_layout(nrow = 1)
comp_b
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
zwaan_data <- read_csv("data/MeansSimonTask.csv")
zwaan_demo <- read_csv("data/DemoSimonTask.csv")
View(zwaan_data)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT")
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_")
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
View(simon_effect)
t.test(weight ~ group, data = simon_effect, paired = TRUE)
t.test(weight ~ group, data = simon_effect)
View(simon_effect)
t.test(mean_RT ~ congruency, data = simon_effect)
t.test(mean_RT ~ congruency, data = simon_effect, paired = TRUE)
rstatix::t_test(simon_effect ~ similarity, data = simon_effect, paired = TRUE)
rstatix::t_test(simon_effect ~ similarity, data = simon_effect, paired = TRUE)
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
rstatix::t_test(simon_effect ~ similarity, data = simon_effect, paired = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
rstatix::t_test(simon_effect ~ congruency, data = simon_effect, paired = TRUE)
rstatix::t_test(simon_effect, simon_effect ~ congruency, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect, paired = TRUE)
simon_effect2 <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() #%>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
View(simon_effect)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE, detailed = TRUE)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
head(simon_effect, n = 5)
View(simon_effect)
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
mean_simon_effect = mean(simon_effect),
diff = mean_incongruent - mean_congruent)
View(descriptives)
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
diff = mean_incongruent - mean_congruent)
simon_effect_long <- simon_effect %>%
pivot_longer(cols = congruent:incongruent, names_to = "col_headings", values_to = "RT")
View(simon_effect_long)
simon_effect_long <- simon_effect %>%
pivot_longer(cols = congruent:incongruent, names_to = "congruency", values_to = "mean_RT")
ggplot(simon_effect_long, aes(x = congruency, y = mean_RT, fill = congruency)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4, alpha = 0.8) +
scale_fill_viridis_d(guide = "none") +
theme_classic() +
labs(x = "Congruency", y = "mean Response Time")
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE, detailed = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect_long, paired = TRUE, detailed = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect_long, paired = TRUE, detailed = TRUE)
## congruent group
shapiro.test(simon_effect$congruent)
## congruent group
shapiro.test(simon_effect$congruent)
## incongruent group
shapiro.test(simon_effect$incongruent)
View(simon_effect)
ggplot(simon_effect, aes(x = "", y = simon_effect)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
theme_classic() +
labs(x = "",
y = "Difference in mean Response Time scores")
# Version 2 with package qqplotr
ggplot(simon_effect, aes(sample = simon_effect)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point()
library(qqplotr)
# Version 2 with package qqplotr
ggplot(simon_effect, aes(sample = simon_effect)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point()
simon_effect_long <- simon_effect %>%
pivot_longer(cols = c(congruent, incongruent), names_to = "congruency", values_to = "mean_RT")
shapiro.test(simon_effect$simon_effect)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
library(lsr)
cohensD(simon_effect ~ similarity, data = simon_effect)
cohensD(simon_effect ~ similarity, data = simon_effect, method = "unequal")
cohensD(simon_effect ~ similarity, data = simon_effect, method = "unequal")
cohensD(congruent, incongrunet, data = simon_effect, method = "paired")
cohensD(congruent, incongruent, data = simon_effect, method = "paired")
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
cohensD(simon_effect$congruent, simon_effect$incongruent)
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
View(simon_effect_long)
cohensD(mean_RT ~ congruency, data = simon_effect_long, method = "paired")
View(simon_effect_long)
cohensD(mean_RT ~ congruency, data = simon_effect_long, method = "paired")
cohensD(simon_effect ~ similarity, data = simon_effect, method = "unequal")
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
cohensD(mean_RT ~ congruency, data = simon_effect_long, method = "paired")
library(pwr)
pwr.t.test(n = 160, sig.level = 0.05, power = 0.8, type = "paired", alternative = "two.sided")
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
diff = mean_incongruent - mean_congruent)
descriptives
View(descriptives)
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
diff = mean_incongruent - mean_congruent, # diff = mean(simon_effect) would also work
sd_diff = sd(simon_effect))
descriptives
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
wilcox.test(mean_RT ~ congruency, data = simon_effect_long, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcox.test(simon_effect$simon_effect, mu = 0)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcox.test(simon_effect$simon_effect, mu = 0)
wilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)
wilcox.test(simon_effect$simon_effect, mu = 0)
cohensD(simon_effect$incongruent, simon_effect$congruent, method = "paired")
t.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)$p
wilcox.test(simon_effect$simon_effect, mu = 0)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox_effsize(data = simon_effect_long, formula = mean_RT ~ congruency, paired = TRUE)
# load in the packages
library(rstatix)
wilcox_effsize(data = simon_effect_long, formula = mean_RT ~ congruency, paired = TRUE)
summary(simon_effect)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
library(psych)
install.packages("psych")
library(psych)
describeBy(simon_effect ~ similarity, data = simon_effect)
describeBy(simon_effect ~ similarity, data = simon_effect)
wilcox_effsize(data = simon_effect, formula = simon_effect ~ similarity)
# storing the p-value
p_wilcoxon <- wilcox.test(simon_effect ~ similarity, data = simon_effect)$p.value
# calculate the z value from half the p-value
z = qnorm(p_wilcoxon/2)
z
wilcox.test(one_sample$wemwbs_sum, mu = 53.0)
# storing the p-value
p_wilcoxon <- wilcox.test(simon_effect ~ similarity, data = simon_effect)$p.value
# calculate the z value from half the p-value
z = qnorm(p_wilcoxon/2)
z
# storing the p-value
p_wilcoxon <- wilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)$p.value
# calculate the z value from half the p-value
z = qnorm(p_wilcoxon/2)
z
summary(simon_effect)
wilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcoxonOneSampleR(one_sample$wemwbs_sum, mu = 53.0, digits = 3)
library(tidyverse)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
age_distinct <- data_prp %>%
distinct(Age)
age_distinct
age_distinct
data_prp <- data_prp %>%
mutate(Age = parse_number(Age))
typeof(data_prp$Age) # fixed
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) # standard deviation of age
demo_total
demo_by_gender <- data_prp %>%
group_by(Gender) %>% # split data up into groups (here Gender)
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
# n from the line above divided by n from demo_total *100
percentage = n/demo_total$n *100,
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
qrp_t1 <- data_prp %>%
#Step 1
select(Code, QRPs_1_Time1:QRPs_11_Time1) %>%
# Step 2
pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores") %>%
# Step 3
group_by(Code) %>% # grouping py participant id
summarise(QRPs_Acceptance_Time1_mean = mean(Scores)) %>% # calculating the average Score
ungroup() # just make it a habit
qrp_step1 <- data_prp %>%
select(Code, QRPs_1_Time1:QRPs_11_Time1)
# show first 5 rows of qrp_step1
head(qrp_step1, n = 5)
renaming_col <- data_prp %>%
select(Participant_ID = Code)
View(renaming_col)
head(renaming_col, n = 5)
library(tidyverse)
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_raw)
dog_data_clean_long <- read_csv("dog_data_clean_long.csv")
dog_data_clean_long <- read_csv("data/dog_data_clean_long.csv")
View(dog_data_clean_long)
dog_data_long <- read_csv("data/dog_data_clean_long.csv")
rm(dog_data_clean_long)
View(dog_data_long)
dog_data_raw <- read_csv("dog_data_raw.csv")
dog_data_wide <- read_csv("data/dog_data_clean_wide.csv")
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_wide)
View(dog_data_raw)
flourishing_brief <- dog_data_raw %>%
select(RID, F1_1:F1_8)
head(flourishing_brief, n = 5)
flourishing_tidy <- dog_data_raw %>%
select(RID, starts_with("F1")) %>%
pivot_longer(cols = -RID, names_to = "Names", values_to = "Response") %>%
group_by(RID) %>%
summarise(Flourishing_pre = mean(Response)) %>%
ungroup()
head(flourishing_tidy, n = 5)
data_flourishing <- dog_data_raw %>%
select(RID, F1_1:F1_8) %>%
pivot_longer(cols = -RID, names_to = "Questionnaire", values_to = "Responses")
View(data_flourishing)
library(tidyverse)
dog_data_raw <- read_csv("data/dog_data_raw.csv")
flourishing_brief <- dog_data_raw %>%
select(RID, starts_with("L1"))
loneliness_brief <- dog_data_raw %>%
select(RID, starts_with("L1"))
dog_data_raw <- read_csv("data/dog_data_raw.csv")
loneliness_brief <- dog_data_raw %>%
select(RID, starts_with("L1"))
head(loneliness_brief, n = 5)
loneliness_tidy <- dog_data_raw %>%
select(RID, starts_with("L1")) %>%
pivot_longer(cols = -RID, names_to = "Names", values_to = "Response") %>%
mutate(Score_corrected = case_when(
Names %in% c("L1_1", "L1_5", "L1_6", "L1_9", "L1_10", "L1_15", "L1_16", "L1_19", "L1_20") ~ 5-Response,
.default = Response
)) %>%
group_by(RID) %>%
summarise(Loneliness_pre = mean(Score_corrected, na.rm = TRUE)) %>%
ungroup()
head(loneliness_tidy, n = 5)
View(dog_data_raw)
# loading tidyverse into the library
library(tidyverse)
# reading in `dog_data_raw.csv`
dog_data_raw <- read_csv("dog_data_raw.csv")
# Task 4: Tidying
loneliness_tidy <- dog_data_raw %>%
# Step 1
select(RID, starts_with("L1")) %>% # select(RID, L1_1:L1_20) also works
# Step 2
pivot_longer(cols = -RID, names_to = "Qs", values_to = "Response") %>%
# Step 3
mutate(Score_corrected = case_when(
Qs %in% c("L1_1", "L1_5", "L1_6", "L1_9", "L1_10", "L1_15", "L1_16", "L1_19", "L1_20") ~ 5-Response,
.default = Response
)) %>%
# Step 4
group_by(RID) %>%
summarise(Loneliness_pre = mean(Score_corrected, na.rm = TRUE)) %>%
ungroup()
View(loneliness_tidy)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN"))
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores")
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE)
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Score_corrected = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
))
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup()
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup() %>%
# Step 7 - to make the data look like the data in `dog_data_clean_long.csv`
pivot_wider(names_from = Subscales, values_from = Scores)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup() %>%
# Step 7 - to make the data look like the data in `dog_data_clean_long.csv`
pivot_wider(names_from = Subscales, values_from = Score)
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN"))
head(PANAS, n = 5)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores")
View(PANAS)
View(PANAS)
284*20
View(PANAS)
PANAS <- dog_data_raw %>%
# Step 1
select(RID, starts_with("PN")) %>%
# Step 2
pivot_longer(cols = -RID, names_to = "Items", values_to = "Scores") %>%
# Step 3
separate(Items, into = c("Stage", "Item_number"), sep = "_", convert = TRUE) %>%
# Step 4 recode Stage
mutate(Stage = case_match(Stage,
"PN1" ~ "pre",
"PN2" ~ "post")) %>%
# Step 5 identify subscales by item number
mutate(Subscales = case_when(
Item_number %in% c(3, 5, 7, 8, 10) ~ "PANAS_PA",
.default = "PANAS_NA"
)) %>%
# Step 6
group_by(RID, Stage, Subscales) %>%
summarise(Score = mean(Scores)) %>%
ungroup() %>%
# Step 7 - to make the data look like the data in `dog_data_clean_long.csv`
pivot_wider(names_from = Subscales, values_from = Score)
head(PANAS, n = 5)
