mod <- lm(Homesick_post~Flourishing_pre_centered + Loneliness_pre_centered + SHS_pre_centered + SCS_pre_centered + Stress_pre_centered, data = dog_reg)
summary(mod)
mod <- lm(Homesick_post~Loneliness_pre_centered*SCS_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
View(dog_data_wide)
mod <- lm(Engagement_post~Loneliness_pre_centered*SCS_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~Loneliness_pre_centered*Flourishing_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(SHS_post~PANAS_PA_pre_centered*Stress_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Flourishing_post~SHS_pre_centered*Loneliness_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~Loneliness_pre_centered*Flourishing_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
dog_reg <- dog_data_wide %>%
#select(RID, Stress_post, Homesick_pre, Loneliness_pre, Flourishing_pre, Stress_pre, Loneliness_post, SCS_pre, Stress_post) %>%
drop_na() %>%
mutate(Flourishing_pre_centered = Flourishing_pre - mean(Flourishing_pre),
PANAS_PA_pre_centered = PANAS_PA_pre - mean(PANAS_PA_pre),
PANAS_NA_pre_centered = PANAS_NA_pre - mean(PANAS_NA_pre),
SHS_pre_centered = SHS_pre - mean(SHS_pre),
SCS_pre_centered = SCS_pre - mean(SCS_pre),
Loneliness_pre_centered = Loneliness_pre - mean(Loneliness_pre),
Stress_pre_centered = Stress_pre - mean(Stress_pre),
Age_Yrs_centered = Age_Yrs - mean(Age_Yrs))
mod <- lm(Loneliness_post~Loneliness_pre_centered*Flourishing_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~Loneliness_pre_centered*SCS_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~Loneliness_pre_centered*Age_Yrs_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~SCS_pre_centered*SHS_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~SCS_pre_centered, data = dog_reg)
summary(mod)
mod <- lm(Loneliness_post~SCS_pre_centered*SHS_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Stress_post~SCS_pre_centered*PANAS_NA_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Stress_post~SCS_pre_centered*Loneliness_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Flourishing_post~SCS_pre_centered*Loneliness_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Flourishing_post~Stress_pre_centered*Loneliness_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Flourishing_post~Live_Pets*Loneliness_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Stress_post~Live_Pets*Loneliness_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~SCS_pre_centered*SHS_pre_centered, data = dog_reg)
summary(mod)
dog_reg <- dog_data_wide %>%
#select(RID, Loneliness_post, Homesick_pre, Loneliness_pre, Flourishing_pre, Stress_pre, Loneliness_post, SCS_pre, Stress_post) %>%
drop_na() %>%
mutate(Flourishing_pre_centered = Flourishing_pre - mean(Flourishing_pre),
PANAS_PA_pre_centered = PANAS_PA_pre - mean(PANAS_PA_pre),
PANAS_NA_pre_centered = PANAS_NA_pre - mean(PANAS_NA_pre),
SHS_pre_centered = SHS_pre - mean(SHS_pre),
SCS_pre_centered = SCS_pre - mean(SCS_pre),
Loneliness_pre_centered = Loneliness_pre - mean(Loneliness_pre),
Stress_pre_centered = Stress_pre - mean(Stress_pre),
Homesick_pre_centered = Homesick_pre - mean(Homesick_pre))
mod <- lm(Loneliness_post~SCS_pre_centered*Homesick_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
mod <- lm(Loneliness_post~Loneliness_pre_centered*Flourishing_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
dog_reg <- dog_data_wide %>%
select(RID, Loneliness_post, Loneliness_pre, Flourishing_pre) %>%
drop_na() %>%
mutate(Flourishing_pre_centered = Flourishing_pre - mean(Flourishing_pre),
Loneliness_pre_centered = Loneliness_pre - mean(Loneliness_pre))
mod <- lm(Loneliness_post~Loneliness_pre_centered*Flourishing_pre_centered, data = dog_reg)
summary(mod)
check_model(mod)
check_collinearity(mod)
dog_data_wide <- read_csv("data/dog_data_clean_wide.csv")
dog_mult_reg <- dog_data_wide %>%
select(RID, Loneliness_post, Loneliness_pre, Flourishing_pre) %>%
drop_na() %>%
mutate(Flourishing_pre_centered = Flourishing_pre - mean(Flourishing_pre),
Loneliness_pre_centered = Loneliness_pre - mean(Loneliness_pre))
mod <- lm(Loneliness_post~Loneliness_pre_centered*Flourishing_pre_centered, data = dog_mult_reg)
summary(mod)
plot_model(mod,
type = "pred",
terms = c("Loneliness_pre_centered", "Flourishing_pre_centered"))
library(sjPlot)
plot_model(mod,
type = "pred",
terms = c("Loneliness_pre_centered", "Flourishing_pre_centered"))
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
library(afex)
library(emmeans)
library(performance)
library(pwr)
james_data <- read_csv("data/James_2015_Expt_2.csv")
View(james_data)
View(james_data)
View(james_data)
View(james_data)
View(james_data)
View(james_data)
View(james_data)
james_data <- data_james %>%
mutate(Participant_ID = row_number(),
Condition = factor(Condition,
labels = c("No-Task Control", "Reactivation+Tetris", "Tetris Only", "Reactivation Only"))) %>%
select(Participant_ID, Condition, Intrusions = Days_One_to_Seven_Image_Based_Intrusions_in_Intrusion_Diary)
data_james <- read_csv("data/James_2015_Expt_2.csv")
james_data <- data_james %>%
mutate(Participant_ID = row_number(),
Condition = factor(Condition,
labels = c("No-Task Control", "Reactivation+Tetris", "Tetris Only", "Reactivation Only"))) %>%
select(Participant_ID, Condition, Intrusions = Days_One_to_Seven_Image_Based_Intrusions_in_Intrusion_Diary)
View(james_data)
james_data %>%
group_by(Condition) %>%
summarise(mean = mean(intrusions),
sd = sd(intrusions))
james_data %>%
group_by(Condition) %>%
summarise(mean = mean(Intrusions),
sd = sd(Intrusions))
View(data_james)
ggplot(james_data, aes(x = Condition, y = intrusions))+
geom_violin()+
geom_boxplot(width = .2)
ggplot(james_data, aes(x = Condition, y = Intrusions))+
geom_violin()+
geom_boxplot(width = .2)
ggplot(james_data, aes(x = Condition, y = Intrusions))+
geom_violin()+
geom_boxplot(width = 0.3)
ggplot(james_data, aes(x = Condition, y = Intrusions))+
geom_violin()+
geom_boxplot(width = 0.25)
ggplot(james_data, aes(x = Condition, y = Intrusions))+
geom_violin()+
geom_boxplot(width = 0.2)
ggplot(james_data, aes(x = Condition, y = Intrusions))+
geom_violin()+
geom_boxplot(width = 0.2) +
labs(y = "Number of Intrusions")
ggplot(james_data, aes(x = Condition, y = Intrusions))+
geom_violin()+
geom_boxplot(width = 0.2) +
labs(y = "Number of Intrusions")
* id = the column containing the participant IDs
aov_ez(id = "PID", #
dv = "Intrusions", # the DV
between = "Condition", # the between-subject variable
es = "pes", # sets effect size to partial eta-squared
type = 3, # this affects how the sum of squares is calculated, set this to 3
include_aov = TRUE,
data = james_data)
aov_ez(id = "Participant_ID", #
dv = "Intrusions", # the DV
between = "Condition", # the between-subject variable
es = "pes", # sets effect size to partial eta-squared
type = 3, # this affects how the sum of squares is calculated, set this to 3
include_aov = TRUE,
data = james_data)
aov_ez(id = "Participant_ID", #
dv = "Intrusions", # the DV
between = "Condition", # the between-subject variable
es = "pes", # sets effect size to partial eta-squared
type = 3, # this affects how the sum of squares is calculated, set this to 3
include_aov = FALSE,
data = james_data)
mod <- aov_ez(id = "Participant_ID", #
dv = "Intrusions", # the DV
between = "Condition", # the between-subject variable
es = "pes", # sets effect size to partial eta-squared
type = 3, # this affects how the sum of squares is calculated, set this to 3
include_aov = TRUE,
data = james_data)
mod
aov_ez(id = "Participant_ID", #
dv = "Intrusions", # the DV
between = "Condition", # the between-subject variable
es = "pes", # sets effect size to partial eta-squared
type = 3, # this affects how the sum of squares is calculated, set this to 3
include_aov = FALSE,
data = james_data)
mod2 <- aov_ez(id = "Participant_ID", #
dv = "Intrusions", # the DV
between = "Condition", # the between-subject variable
es = "pes", # sets effect size to partial eta-squared
type = 3, # this affects how the sum of squares is calculated, set this to 3
include_aov = FALSE,
data = james_data)
mod <- aov_ez(id = "Participant_ID", #
dv = "Intrusions", # the DV
between = "Condition", # the between-subject variable
es = "pes", # sets effect size to partial eta-squared
type = 3, # this affects how the sum of squares is calculated, set this to 3
include_aov = TRUE,
data = james_data)
# calling mod gives us the output of the ANOVA
mod
aov(Intrusions ~ Condition, data = james_data)
mod2 <- aov(Intrusions ~ Condition, data = james_data)
summary(mod2, type = 3)
car::Anova(mod)
car::Anova(mod2)
car::Anova(mod2, type = "3")
library(car)
library(rstatix)
library(effectsize)
mod <- anova_test(data = james_data,
formula = Intrusions ~ Conditions,
type = 2,
effect.size = "pes")
mod <- anova_test(data = james_data,
formula = Intrusions ~ Condition,
type = 2,
effect.size = "pes")
anova_test(data = james_data,
formula = Intrusions ~ Condition,
type = 2,
effect.size = "pes")
View(james_data)
check_normality(mod)
check_normality(mod2)
check_normality(mod2)$aov
qqplot(james_data$Intrusions)
library(qqplotr)
ggplot(james_data, aes(sample = Intrusions)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point() +
facet_wrap(~Condition)
ggplot(james_data, aes(sample = Intrusions)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw()
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis()
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d()
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = 0.5)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = 0.2)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(aes(alpha = 0.2))
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = 0.5)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
scale_fill_viridis_d(alpha = 0.5) +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw()
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = 0.5)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = .8)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = .2)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
#theme_bw() +
scale_fill_viridis_d(alpha = .2)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
#theme_bw() +
scale_fill_viridis_d(alpha = 1)
ggplot(james_data, aes(sample = Intrusions, fill = Condition, alpha = 0.5)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
#theme_bw() +
scale_fill_viridis_d(alpha = 1)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
#theme_bw() +
scale_fill_viridis_d(aes(alpha = 0.5))
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(aes(alpha = 0.5))
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = 0.5)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band(alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d(alpha = 0.5)
ggplot(james_data, aes(sample = Intrusions, fill = Condition)) +
stat_qq_band(alpha = 0.5) +
stat_qq_line() +
stat_qq_point() +
facet_wrap(~Condition) +
theme_bw() +
scale_fill_viridis_d()
leveneTest(Intrusions ~ Condition, data = james_data)
summary(mod)
mod
get_anova_table(mod)
mod$F
round(mod$F,4)
round(mod$F,2)
performance::check_model(mod)
mod_pairwise <-emmeans(mod,
pairwise ~ Condition,
adjust = "bonferroni")
mod <- lm(Intrusions ~ Condition, data = james_data)
anova(mod)
anova(mod, type = 2)
Anova(mod, type = 2)
anova_test(mod, type = 2, effect.size = "pes")
Anova(mod, type = 2)
mod_lm <- lm(Intrusions ~ Condition, data = james_data)
mod <- anova_test(mod_lm,
type = 2,
effect.size = "pes")
anova_test(mod_lm,
type = 2,
effect.size = "pes")
mod_aov <- aov(Intrusions ~ Condition, data = james_data)
anova_test(mod_lm, type = 2, effect.size = "pes")
summary(mod_aov)
anova_test(mod_lm, type = 2, effect.size = "pes")
summary(mod_aov)
mod_lm <- lm(Intrusions ~ Condition, data = james_data)
mod_aov <- aov(Intrusions ~ Condition, data = james_data)
anova_test(mod_lm, type = 2, effect.size = "pes")
summary(mod_aov)
summary(mod_lm)
car::Anova(mod_lm, type = 2)
summary(mod_lm)
anova_summary(mod_lm)
anova_test(mod_lm)
car::Anova(mod_lm, type = 2)
summary(mod_aov)
summary(mod_aov)
car::Anova(mod_lm, type = 1)
car::Anova(mod_lm, type = 1)
summary(mod_aov)
anova_test(mod_lm, type = 1)
car::Anova(mod_lm, type = 2)
anova_test(mod_lm, effect.size = "pes", type = 1)
summary(mod_aov)
anova_test(mod_lm, effect.size = "pes", type = 1)
car::Anova(mod_lm, type = 2)
summary(mod_aov)
summary(mod_lm)
summary(mod_aov)
summary(mod_aov)
anova_test(mod_lm, effect.size = "pes", type = 1)
car::Anova(mod_lm, type = 2)
model_check(mod_lm)
library(performance)
check_model(mod_lm)
mod <- lm(Intrusions ~ Condition, data = james_data)
anova_test(mod, type = 2, effect.size = "pes")
anova_test(data = james_data,
formula = Intrusions ~ Condition,
type = 2,
effect.size = "pas")
anova_test(data = james_data,
dv = Intrusions,
wid = Participant_ID,
between = Condition,
type = 2,
effect.size = "pas")
emmeans(mod,
pairwise ~ Condition,
adjust = "bonferroni")
mod_pairwise$contrasts
emmeans(mod,
pairwise ~ Condition,
adjust = "bonferroni")
pwr.anova.test(k = 4, n = 18, sig.level = .05, power = 0.8)
pairwise_t_test(james_data,
Intrusions ~ Condition,
pool.sd = FALSE,
p.adjust.method = "bonferroni")
emmeans(mod,
pairwise ~ Condition,
adjust = "bonferroni")
pairwise_t_test(james_data,
Intrusions ~ Condition,
pool.sd = FALSE,
p.adjust.method = "bonferroni")
pairwise_t_test(james_data,
Intrusions ~ Condition,
pool.sd = TRUE,
p.adjust.method = "bonferroni")
pairwise_t_test(mod,
p.adjust.method = "bonferroni")
pairwise_t_test(data = james_data,
formula = Intrusions ~ Condition,
p.adjust.method = "bonferroni")
emmeans(mod,
pairwise ~ Condition,
adjust = "bonferroni")
TukeyHSD(mod)
detach("package:effectsize", unload = TRUE)
cohens_d(data = james_data,
formula = Intrusions ~ Condition)
library(effectsize)
pwr.anova.test(k = 4, n = 18, sig.level = .05, power = 0.8)$f
pwr.anova.test(k = 4, n = 18, sig.level = .05, power = 0.8)
effectsize::f_to_eta2(pwr.anova.test(k = 4, n = 18, sig.level = .05, power = 0.8)$f)
eta_squared(mod)
eta_squared(mod, partial = TRUE)
eta_squared(mod, partial = FALSE)
eta2_to_f(0.143)
eta2_to_f2(0.143)
eta2_to_f(0.143)
eta2_to_f(0.143)
