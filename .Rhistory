facet_wrap(~similarity)
ggplot(zwaan2, aes(x = mean_RT)) +
geom_histogram(fill = "magenta") +
facet_wrap(~similarity)
ggplot(zwaan2, aes(x = mean_RT)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
ggplot(zwaan2, aes(x = similarity, y = mean_RT, fill = similarity)) +
geom_violin() +
geom_boxplot()
ggplot(zwaan2, aes(x = gender_response, y = mean_RT, fill = similarity)) +
geom_violin() +
geom_boxplot()
View(zwaan2)
mutate(session1_diff = diff(session1_congruent, session1_incongruent)
zwaan <- full_join(zwaan_demo, zwaan_data, by = join_by(twosubjectnumber == participant)) %>%
zwaan <- full_join(zwaan_demo, zwaan_data, by = join_by(twosubjectnumber == participant)) %>%
mutate(session1_diff = diff(session1_congruent, session1_incongruent))
zwaan <- full_join(zwaan_demo, zwaan_data, by = join_by(twosubjectnumber == participant)) %>%
mutate(session1_diff = abs(session1_incongruent-session1_congruent))
ggplot(zwaan2, aes(x = session1_diff)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
ggplot(zwaan, aes(x = session1_diff)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
zwaan <- full_join(zwaan_demo, zwaan_data, by = join_by(twosubjectnumber == participant)) %>%
mutate(session1_diff = abs(session1_incongruent-session1_congruent),
session2_diff = abs(session2_incongruent-session2_congruent),
average_diff = (session1_diff+session2_diff)/2)
ggplot(zwaan, aes(x = session2_diff)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
ggplot(zwaan, aes(x = average_diff)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
zwaan_data <- read_csv("data/MeansSimonTask.csv")
zwaan_demo <- read_csv("data/DemoSimonTask.csv")
View(zwaan_data)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT")
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_")
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT)
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent)
View(simon_effect)
View(simon_effect)
View(simon_effect)
View(zwaan_demo)
View(zwaan_demo)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber))
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender_response:education_response, similarity:simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
head(simon_effect, n = 5)
head(simon_effect, n = 5)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
View(simon_effect)
ggplot(simon_effect, aes(x = gender, y = simon_effect, fill = similarity)) +
geom_violin() +
geom_boxplot()
ggplot(simon_effect, aes(x = similarity, y = simon_effect)) +
geom_violin() +
geom_boxplot()
ggplot(simon_effect, aes(sample = simon_effect)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point() +
facet_wrap(~similarity)
library(qqplotr)
ggplot(simon_effect, aes(sample = simon_effect)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point() +
facet_wrap(~similarity)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_density(fill = "magenta") +
facet_wrap(~education)
simon_effect %>% count(education)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_density(fill = "magenta") +
facet_wrap(~gender)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_density(fill = "magenta") +
facet_wrap(~education)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_histogram(fill = "magenta") +
facet_wrap(~education)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_density(fill = "magenta") +
facet_wrap(~education)
test <- simon_effect %>% filter(education %in% c("Graduate degree (Master's, Doctorate, etc.)", "High school"))
View(test)
t.test(simon_effect~education, data = test)
wilcox.test(simon_effect ~ education, data = test)
descriptives <- simon_effect %>%
group_by(similarity) %>%
summarise(mean_RT = mean(simon_effect),
sd_RT = sd(simon_effect))
View(descriptives)
ggplot(simon_effect, aes(x = similarity, y = simon_effect)) +
geom_violin() +
geom_boxplot()
ggplot(simon_effect, aes(x = similarity, y = simon_effect)) +
geom_violin() +
geom_boxplot(width = 0.6) +
```
ggplot(simon_effect, aes(x = similarity, y = simon_effect)) +
geom_violin() +
geom_boxplot(width = 0.6)
ggplot(simon_effect, aes(x = similarity, y = simon_effect)) +
geom_violin() +
geom_boxplot(width = 0.5)
ggplot(simon_effect, aes(x = similarity, y = simon_effect)) +
geom_violin() +
geom_boxplot(width = 0.4)
ggplot(one_sample, aes(x = "", y = wemwbs_sum)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
geom_point() +
theme_classic() +
labs(x = "",
y = "Total WEMWBS Scores")
library(patchwork)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
library(lsr)
library(scales)
library(qqplotr)
library(car)
library(pwr)
library(rcompanion)
data_ballou <- read_csv("data/data_ballou_reduced.csv")
data_wemwbs <- data_ballou %>%
pivot_longer(cols = wemwbs_1:wemwbs_14, names_to = "Questions", values_to = "Scores") %>%
group_by(pid) %>%
summarise(wemwbs_sum = sum(Scores))
data_ballou <- data_ballou %>%
mutate(gender = factor(gender,
levels = c("Woman", "Man", "Non-binary")),
eduLevel = factor(eduLevel,
levels = c("Completed Secondary School", "Some University but no degree", "University Bachelors Degree", "Vocational or Similar", "Graduate or professional degree (MA, MS, MBA, PhD, etc)"))) %>%
left_join(data_wemwbs)
chi_square <- data_ballou %>%
select(pid, gender, eduLevel)
chi_square_frequency <- chi_square %>%
count(gender, eduLevel) %>%
pivot_wider(names_from = eduLevel, values_from = n)
chi_square_frequency
ggplot(chi_square, aes(x = eduLevel, fill = gender)) +
geom_bar(position = "dodge") +
scale_fill_viridis_d(name = "Gender") +
scale_x_discrete(name = "Level of Education",
labels = label_wrap(12)) +
scale_y_continuous(name = "Count") +
theme_classic()
chi_square_df <- as.data.frame(chi_square)
associationTest(formula = ~ eduLevel + gender, data = chi_square_df)
one_sample <- data_ballou %>%
select(pid, wemwbs_sum)
descriptives <- one_sample %>%
summarise(mean_wemwbs = mean(wemwbs_sum),
sd = sd(wemwbs_sum))
descriptives
ggplot(one_sample, aes(x = "", y = wemwbs_sum)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
geom_point() +
theme_classic() +
labs(x = "",
y = "Total WEMWBS Scores")
ggplot(one_sample, aes(x = "", y = wemwbs_sum)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
geom_jitter() +
theme_classic() +
labs(x = "",
y = "Total WEMWBS Scores")
ggplot(one_sample, aes(x = "", y = wemwbs_sum)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
geom_jitter(width = 0.5) +
theme_classic() +
labs(x = "",
y = "Total WEMWBS Scores")
ggplot(one_sample, aes(x = "", y = wemwbs_sum)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
geom_jitter(width = 0.1) +
theme_classic() +
labs(x = "",
y = "Total WEMWBS Scores")
ggplot(one_sample, aes(x = "", y = wemwbs_sum)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
theme_classic() +
labs(x = "",
y = "Total WEMWBS Scores")
ggplot(simon_effect, aes(x = similarity, y = simon_effect, fill = similarity)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4) +
scale_fill_viridis_d()
ggplot(simon_effect, aes(x = similarity, y = simon_effect, fill = similarity)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4, alpha = 0.8) +
scale_fill_viridis_d()
ggplot(simon_effect, aes(x = similarity, y = simon_effect, fill = similarity)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4, alpha = 0.8) +
scale_fill_viridis_d() +
theme_classic()
ggplot(simon_effect, aes(x = similarity, y = simon_effect, fill = similarity)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4, alpha = 0.8) +
scale_fill_viridis_d(guide = "none") +
theme_classic()
ggplot(simon_effect, aes(x = similarity, y = simon_effect, fill = similarity)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4, alpha = 0.8) +
scale_fill_viridis_d(guide = "none") +
theme_classic() +
labs(x = "Similarity", y = "Simon effect")
wilcox.test(simon_effect ~ education, data = simon_effect)
test <- simon_effect %>%
filter(education %in% c("High school", "Graduate degree (Master's, Doctorate, etc.)"))
wilcox.test(simon_effect ~ education, data = test)
leveneTest(simon_effect ~ group, data = simon_effect)
leveneTest(simon_effect ~ similarity, data = simon_effect)
leveneTest(simon_effect ~ similarity, data = simon_effect)
ggplot(simon_effect, aes(x = simon_effect)) +
geom_density(fill = "magenta") +
facet_wrap(~similarity)
## same group
same <- simon_effect %>%
filter(similarity == "same")
shapiro.test(same$similarity)
View(same)
shapiro.test(same$simon_effect)
shapiro.test(different$simon_effect)
## different group
different <- simon_effect %>%
filter(similarity == "different")
shapiro.test(different$simon_effect)
ggplot(simon_effect, aes(sample = simon_effect)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point() +
facet_wrap(~similarity)
## same group
same <- simon_effect %>%
filter(similarity == "same")
shapiro.test(same$simon_effect)
## different group
different <- simon_effect %>%
filter(similarity == "different")
shapiro.test(different$simon_effect)
t.test(simon_effect ~ similarity, data = simon_effect)
t.test(simon_effect ~ similarity, data = simon_effect, var.qual = TRUE)
t.test(simon_effect ~ similarity, data = simon_effect, paired = TRUE)
t.test(simon_effect ~ similarity, data = my_data, paired = TRUE)
test <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
View(test)
t.test(simon_effect ~ mean_RT, data = test, paired = TRUE)
library(rstatix)
install.packages("rstatix")
library(rstatix)
## different group
different <- simon_effect %>%
filter(similarity == "different")
t_test(data = simon_effect, formula = simon_effect ~ similarity)
t_test(data = simon_effect, formula = simon_effect ~ similarity, var.equal = FALSE)
t_test(one_sample, wemwbs_sum, mu = 51.0)
View(one_sample)
t_test(one_sample$wemwbs_sum, mu = 51.0)
t_test(one_sample, wemwbs_sum ~ 1, mu = 51.0)
t.test(one_sample$wemwbs_sum, mu = 51.0)
t_test(one_sample, wemwbs_sum ~ 1, mu = 51.0)
t_test(data = simon_effect, formula = simon_effect ~ similarity, var.equal = FALSE)
t_test(data = simon_effect, formula = simon_effect ~ similarity, var.equal = FALSE, paired = TRUE)
t_test(data = simon_effect, formula = simon_effect ~ similarity, var.equal = FALSE, paired = FALSE)
t_test(data = simon_effect,
formula = simon_effect ~ similarity, paired = FALSE, var.equal = FALSE, detailed = TRUE)
t_test(data = simon_effect,
formula = simon_effect ~ similarity, paired = TRUE, var.equal = FALSE, detailed = TRUE)
t_test(data = simon_effect,
formula = simon_effect ~ similarity,
paired = TRUE,
var.equal = TRUE,
detailed = TRUE)
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = FALSE) # set this to true for more detail
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = FALSE) # set this to true for more detail
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
32.85-35.99
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = TRUE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = TRUE, # for an independent t-test
var.equal = TRUE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = TRUE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = TRUE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
View(test)
t_test(data = test,
formula = simon_effect ~ congruency, # DV ~ IV
paired = TRUE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
t_test(data = test,
formula = mean_RT ~ congruency, # DV ~ IV
paired = TRUE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
t_test(data = test,
formula = mean_RT ~ congruency, # DV ~ IV
paired = FALSE, # for an independent t-test
var.equal = TRUE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
t_test(data = test,
formula = mean_RT ~ congruency, # DV ~ IV
paired = FALSE, # for an independent t-test
var.equal = FALSE, # for a Welch t-test
detailed = TRUE) # set this to true for more detail
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test (default)
var.equal = FALSE, # for a Welch t-test (default)
alternative = "two.sided", # default - the alternative hypothesis is tested in both directions
detailed = TRUE) # set this to true for more detail (FALSE is default)
cohensD(simon_effect ~ similarity, data = simon_effect)
cohensD(simon_effect ~ similarity, data = simon_effect, method = "paired")
cohensD(mean_RT ~ congruency, data = test, method = "paired")
cohensD(congruent, incongruent, data = simon_effect)
cohensD(congruent, incongruent, data = simon_effect, method = "paired")
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
cohensD(simon_effect ~ similarity, data = simon_effect)
pwr.t.test(n = 80, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr.t.test(d = 0.1451628, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr.t.test(d = 0.15, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr.t.test(d = 0.14, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr.t.test(d = 0.145, sig.level = 0.05, power = 0.8, type = "two.sample")
748*2
pwr.t.test(d = 0.1451, sig.level = 0.05, power = 0.8, type = "two.sample")
pwr.t.test(d = 0.145, sig.level = 0.05, power = 0.8, type = "two.sample")
a <- t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test (default)
var.equal = FALSE, # for a Welch t-test (default)
alternative = "two.sided", # default - the alternative hypothesis is tested in both directions
detailed = TRUE) # set this to true for more detail (FALSE is default)
View(a)
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test (default)
var.equal = FALSE, # for a Welch t-test (default)
alternative = "two.sided", # default - the alternative hypothesis is tested in both directions
detailed = TRUE)$p # set this to true for more detail (FALSE is default)
round(t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test (default)
var.equal = FALSE, # for a Welch t-test (default)
alternative = "two.sided", # default - the alternative hypothesis is tested in both directions
detailed = TRUE)$p, 4) # set this to true for more detail (FALSE is default)
t_test(data = simon_effect,
formula = simon_effect ~ similarity, # DV ~ IV
paired = FALSE, # for an independent t-test (default)
var.equal = FALSE, # for a Welch t-test (default)
alternative = "two.sided", # default - the alternative hypothesis is tested in both directions
detailed = TRUE) # set this to true for more detail (FALSE is default)
t.test(data = simon_effect,
formula = simon_effect ~ similarity)
t.test(simon_effect ~ similarity, data = simon_effect)
wilcox.test(simon_effect ~ education, data = test)
test2 <- simon_effect %>%
filter(education %in% c("High school", "Graduate degree (Master's, Doctorate, etc.)"))
wilcox.test(simon_effect ~ education, data = test2)
View(test2)
t.test(simon_effect ~ similarity, data = simon_effect)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = TRUE)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = TRUE, paired = TRUE)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = TRUE)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = FALSE)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = TRUE)
t.test(simon_effect ~ similarity, data = simon_effect, var.equal = FALSE)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox.test(simon_effect ~ similarity, data = simon_effect, exact = FALSE)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
summary(simon_effect)
simon_effect %>% group_by(similarity) %>%
summarise(count = n(), median = median(simon_effect))
simon_effect %>% group_by(similarity) %>%
summarise(median = median(simon_effect))
34.44134	- 35.68470
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox_test(simon_effect, simon_effect ~ similarity)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox_effsize(data = one_sample, wemwbs_sum~ 1, mu = 53.0)
wilcox_effsize(data = one_sample, wemwbs_sum, mu = 53.0)
wilcox_effsize(data = simon_effect, formula = simon_effect ~ similarity)
wilcoxonOneSampleR(one_sample$wemwbs_sum, mu = 53.0, digits = 3)
wilcox_effsize(data = one_sample, formula = wemwbs_sum ~ 1)
wilcox_effsize(data = one_sample, formula = wemwbs_sum ~ 1, mu = 53.0)
wilcoxonOneSampleR(one_sample$wemwbs_sum, mu = 53.0, digits = 3)
