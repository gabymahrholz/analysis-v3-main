ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point()
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
# changes colour palette
scale_colour_brewer(palette = "Dark2") +
# add breaks from 2500 to 6500 in increasing steps of 500
scale_x_continuous(breaks = seq(from = 2500, to = 6500, by = 500))
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
# split main plot up into different subplots by species
facet_wrap(~ species)
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
facet_wrap(~ species) +
# limits the range of the y axis
coord_cartesian(ylim = c(0, 250))
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
facet_wrap(~ species) +
labs(x = "Body Mass (in g)", # labels the x axis
y = "Flipper length (in mm)", # labels the y axis
colour = "Sex") # labels the grouping variable in the legend
ggplot(data = penguins, mapping = aes(x=body_mass_g, y=flipper_length_mm, colour=sex)) +
geom_point() +
scale_colour_brewer(palette = "Dark2") +
facet_wrap(~ species) +
labs(x = "Body Mass (in g)",
y = "Flipper length (in mm)",
colour = "Sex") +
# add a theme
theme_classic()
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp_viz <- read_csv("data/data_prp_for_ch4.csv")
glimpse(data_prp_viz)
data_prp_viz <- data_prp_viz %>%
mutate(Gender = factor(Gender,
levels = c(2, 1, 3),
labels = c("females", "males", "non-binary")),
Secondyeargrade = factor(Secondyeargrade,
levels = c(1, 2, 3, 4, 5),
labels = c("â‰¥ 70% (1st class grade)", "60-69% (2:1 grade)", "50-59% (2:2 grade)", "40-49% (3rd class)", "< 40%")),
Plan_prereg = factor(Plan_prereg,
levels = c(1, 3, 2),
labels = c("Yes", "Unsure", "No")),
Closely_follow = factor(Closely_follow,
levels = c(2, 3),
labels = c("Followed it somewhat", "Followed it exactly")),
Research_exp = factor(Research_exp),
Pre_reg_group = factor(Pre_reg_group))
ggplot(data_prp_viz, aes(x = Gender)) +
geom_bar()
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
# customise colour
scale_fill_viridis_d()
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
scale_fill_viridis_d() +
# changing group labels on the breaks of the x axis
scale_x_discrete(labels = c("Female", "Male", "Non-Binary")) +
scale_y_continuous(
# changing name of the y axis
name = "Count",
# remove the space below the bars (first number), but keep a tiny bit (5%) above (second number)
expand = expansion(mult = c(0, 0.05))
)
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
scale_fill_viridis_d(
# remove the legend
guide = "none") +
scale_x_discrete(labels = c("Female", "Male", "Non-Binary")) +
scale_y_continuous(
name = "Count",
expand = expansion(mult = c(0, 0.05))
)
ggplot(data_prp_viz, aes(x = Gender, fill = Gender)) +
geom_bar() +
scale_fill_viridis_d(
guide = "none") +
scale_x_discrete(labels = c("Female", "Male", "Non-Binary")) +
scale_y_continuous(
name = "Count",
expand = expansion(mult = c(0, 0.05))
) +
# pick a theme
theme_minimal()
gender_count <- data_prp_viz %>%
count(Gender)
gender_count
ggplot(gender_count, aes(x = Gender, y = n, fill = Gender)) +
geom_col()
ggplot(gender_count, aes(x = Gender, y = n, fill = Gender)) +
geom_col() +
# replaced vidiris with the brewer palette
scale_fill_brewer(
palette = "Set1", # try "Set2" or "Dark2" for some variety
guide = "none") + # legend removed
# labels of the categories changed
scale_x_discrete(labels = c("Male", "Female", "Non-Binary")) +
scale_y_continuous(
# change y axis label
name = "Count",
# starts bars on x axis without any gaps but leaves some space at the top (this time 10%)
expand = expansion(mult = c(0, 0.1))
) +
# different theme
theme_light()
## Stacked barchart
bc_stacked <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar() + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 1)) # display across 2 rows
## Percent stacked barchart
bc_percent <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar(position = "fill") + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 1)) # display across 2 rows
bc_stacked + bc_percent + plot_layout(nrow = 1)
gbc_default <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar(position = "dodge") + # add position argument here
theme(legend.position = "bottom") # move legend to the bottom
## Prettier grouped barchart
gbc_pretty <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Pre_reg_group)) +
geom_bar(position = "dodge") + # add position argument here
# changing labels for x, y, and fill category - alternative method
labs(x = "Pre-registration planned", y = "Count", fill = "Pre-registered dissertation") +
# manual colour change for values
scale_fill_manual(values = c('#648FFF', '#DC267F'),
labels = c("Yes", "No")) +
scale_y_continuous(
# remove the space below the bars, but keep a tiny bit (5%) above
expand = expansion(mult = c(0, 0.05))
) +
# pick a theme
theme_classic() +
# need to move this following line to the end otherwise the `theme_*` overrides it
theme(legend.position = "bottom") +
# display across 2 rows
guides(fill = guide_legend(nrow = 2))
gbc_default + gbc_pretty + plot_layout(nrow = 1)
gbc_default <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "dodge") +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3)) # display across 3 rows
## Prettier grouped barchart with missing values
gbc_pretty <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "dodge") +
labs(x = "Pre-registration planned", y = "Count", fill = "Pre-registration followed") +
# manual colour change for values of the factor and the NA responses
scale_fill_manual(values = c('#648FFF', '#DC267F'), na.value = '#FFB000') +
scale_y_continuous(
expand = expansion(mult = c(0, 0.05))
) +
theme_classic() +
theme(legend.position = "bottom") +
guides(fill = guide_legend(nrow = 3)) # display across 3 rows
gbc_default + gbc_pretty + plot_layout(nrow = 1)
# remove NA
prereg_plan_follow <- data_prp_viz %>%
select(Code, Plan_prereg, Closely_follow) %>%
drop_na(Closely_follow)
# check NA have been removed
prereg_plan_follow %>%
distinct(Plan_prereg, Closely_follow) %>%
arrange(Plan_prereg, Closely_follow)
# with NA
comp_a <- ggplot(data_prp_viz, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "fill") + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 2)) # display across 2 rows
# without NA
comp_b <- ggplot(prereg_plan_follow, aes(x = Plan_prereg, fill = Closely_follow)) +
geom_bar(position = "fill") + # add position argument here
theme(legend.position = "bottom") + # move legend to the bottom
guides(fill = guide_legend(nrow = 2)) # display across 2 rows
comp_a + comp_b + plot_layout(nrow = 1)
comp_b
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
zwaan_data <- read_csv("data/MeansSimonTask.csv")
zwaan_demo <- read_csv("data/DemoSimonTask.csv")
View(zwaan_data)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT")
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_")
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
View(simon_effect)
t.test(weight ~ group, data = simon_effect, paired = TRUE)
t.test(weight ~ group, data = simon_effect)
View(simon_effect)
t.test(mean_RT ~ congruency, data = simon_effect)
t.test(mean_RT ~ congruency, data = simon_effect, paired = TRUE)
rstatix::t_test(simon_effect ~ similarity, data = simon_effect, paired = TRUE)
rstatix::t_test(simon_effect ~ similarity, data = simon_effect, paired = TRUE)
View(simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
rstatix::t_test(simon_effect ~ similarity, data = simon_effect, paired = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup()
rstatix::t_test(simon_effect ~ congruency, data = simon_effect, paired = TRUE)
rstatix::t_test(simon_effect, simon_effect ~ congruency, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect, paired = TRUE)
simon_effect2 <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() #%>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
View(simon_effect)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE, detailed = TRUE)
simon_effect <- zwaan_data %>%
pivot_longer(cols = session1_congruent:session2_incongruent, names_to = "col_headings", values_to = "RT") %>%
separate(col_headings, into = c("Session_number", "congruency"), sep = "_") %>%
group_by(participant, similarity, congruency) %>%
summarise(mean_RT = mean(RT)) %>%
ungroup() %>%
pivot_wider(names_from = congruency, values_from = mean_RT) %>%
mutate(simon_effect = incongruent - congruent) %>%
full_join(zwaan_demo, by = join_by(participant == twosubjectnumber)) %>%
select(participant, gender = gender_response, age = age_response, education = education_response, similarity:simon_effect)
head(simon_effect, n = 5)
View(simon_effect)
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
mean_simon_effect = mean(simon_effect),
diff = mean_incongruent - mean_congruent)
View(descriptives)
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
diff = mean_incongruent - mean_congruent)
simon_effect_long <- simon_effect %>%
pivot_longer(cols = congruent:incongruent, names_to = "col_headings", values_to = "RT")
View(simon_effect_long)
simon_effect_long <- simon_effect %>%
pivot_longer(cols = congruent:incongruent, names_to = "congruency", values_to = "mean_RT")
ggplot(simon_effect_long, aes(x = congruency, y = mean_RT, fill = congruency)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.4, alpha = 0.8) +
scale_fill_viridis_d(guide = "none") +
theme_classic() +
labs(x = "Congruency", y = "mean Response Time")
rstatix::t_test(mean_RT ~ congruency, data = simon_effect2, paired = TRUE, detailed = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect_long, paired = TRUE, detailed = TRUE)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
rstatix::t_test(mean_RT ~ congruency, data = simon_effect_long, paired = TRUE, detailed = TRUE)
## congruent group
shapiro.test(simon_effect$congruent)
## congruent group
shapiro.test(simon_effect$congruent)
## incongruent group
shapiro.test(simon_effect$incongruent)
View(simon_effect)
ggplot(simon_effect, aes(x = "", y = simon_effect)) +
geom_violin(fill = "#FB8D61", alpha = 0.4) + # alpha for opacity, fill for adding colour
geom_boxplot(fill = "#FB8D61", width = 0.5) + # change width of the boxes
theme_classic() +
labs(x = "",
y = "Difference in mean Response Time scores")
# Version 2 with package qqplotr
ggplot(simon_effect, aes(sample = simon_effect)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point()
library(qqplotr)
# Version 2 with package qqplotr
ggplot(simon_effect, aes(sample = simon_effect)) +
stat_qq_band(fill = "#FB8D61", alpha = 0.4) +
stat_qq_line(colour = "#FB8D61") +
stat_qq_point()
simon_effect_long <- simon_effect %>%
pivot_longer(cols = c(congruent, incongruent), names_to = "congruency", values_to = "mean_RT")
shapiro.test(simon_effect$simon_effect)
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
library(lsr)
cohensD(simon_effect ~ similarity, data = simon_effect)
cohensD(simon_effect ~ similarity, data = simon_effect, method = "unequal")
cohensD(simon_effect ~ similarity, data = simon_effect, method = "unequal")
cohensD(congruent, incongrunet, data = simon_effect, method = "paired")
cohensD(congruent, incongruent, data = simon_effect, method = "paired")
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
cohensD(simon_effect$congruent, simon_effect$incongruent)
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
View(simon_effect_long)
cohensD(mean_RT ~ congruency, data = simon_effect_long, method = "paired")
View(simon_effect_long)
cohensD(mean_RT ~ congruency, data = simon_effect_long, method = "paired")
cohensD(simon_effect ~ similarity, data = simon_effect, method = "unequal")
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
cohensD(mean_RT ~ congruency, data = simon_effect_long, method = "paired")
library(pwr)
pwr.t.test(n = 160, sig.level = 0.05, power = 0.8, type = "paired", alternative = "two.sided")
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
diff = mean_incongruent - mean_congruent)
descriptives
View(descriptives)
descriptives <- simon_effect %>%
summarise(mean_congruent = mean(congruent),
sd_congruent = sd(congruent),
mean_incongruent = mean(incongruent),
sd_incongruent = sd(incongruent),
diff = mean_incongruent - mean_congruent, # diff = mean(simon_effect) would also work
sd_diff = sd(simon_effect))
descriptives
t.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
cohensD(simon_effect$congruent, simon_effect$incongruent, method = "paired")
wilcox.test(mean_RT ~ congruency, data = simon_effect_long, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcox.test(simon_effect$simon_effect, mu = 0)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcox.test(simon_effect$simon_effect, mu = 0)
wilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)
wilcox.test(simon_effect$simon_effect, mu = 0)
cohensD(simon_effect$incongruent, simon_effect$congruent, method = "paired")
t.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)$p
wilcox.test(simon_effect$simon_effect, mu = 0)
wilcox.test(simon_effect ~ similarity, data = simon_effect)
wilcox_effsize(data = simon_effect_long, formula = mean_RT ~ congruency, paired = TRUE)
# load in the packages
library(rstatix)
wilcox_effsize(data = simon_effect_long, formula = mean_RT ~ congruency, paired = TRUE)
summary(simon_effect)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
library(psych)
install.packages("psych")
library(psych)
describeBy(simon_effect ~ similarity, data = simon_effect)
describeBy(simon_effect ~ similarity, data = simon_effect)
wilcox_effsize(data = simon_effect, formula = simon_effect ~ similarity)
# storing the p-value
p_wilcoxon <- wilcox.test(simon_effect ~ similarity, data = simon_effect)$p.value
# calculate the z value from half the p-value
z = qnorm(p_wilcoxon/2)
z
wilcox.test(one_sample$wemwbs_sum, mu = 53.0)
# storing the p-value
p_wilcoxon <- wilcox.test(simon_effect ~ similarity, data = simon_effect)$p.value
# calculate the z value from half the p-value
z = qnorm(p_wilcoxon/2)
z
# storing the p-value
p_wilcoxon <- wilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)$p.value
# calculate the z value from half the p-value
z = qnorm(p_wilcoxon/2)
z
summary(simon_effect)
wilcox.test(simon_effect$incongruent, simon_effect$congruent, paired = TRUE)
wilcox.test(simon_effect$congruent, simon_effect$incongruent, paired = TRUE)
wilcoxonOneSampleR(one_sample$wemwbs_sum, mu = 53.0, digits = 3)
library(tidyverse)
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
data_prp <- read_csv("data/prp_data_reduced.csv")
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
age_distinct <- data_prp %>%
distinct(Age)
age_distinct
age_distinct
data_prp <- data_prp %>%
mutate(Age = parse_number(Age))
typeof(data_prp$Age) # fixed
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age), # mean age
sd_age = sd(Age)) # standard deviation of age
demo_total
demo_total <- data_prp %>%
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) # standard deviation of age
demo_total
demo_by_gender <- data_prp %>%
group_by(Gender) %>% # split data up into groups (here Gender)
summarise(n = n(), # participant number
mean_age = mean(Age, na.rm = TRUE), # mean age
sd_age = sd(Age, na.rm = TRUE)) %>%  # standard deviation of age
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
# n from the line above divided by n from demo_total *100
percentage = n/demo_total$n *100,
mean_age = mean(Age, na.rm = TRUE),
sd_age = sd(Age, na.rm = TRUE)) %>%
ungroup()
demo_by_gender
demo_by_gender <- data_prp %>%
group_by(Gender) %>%
summarise(n = n(),
percentage = round(n/demo_total$n *100, 2), # percentage with 2 decimal places
mean_age = round(mean(Age, na.rm = TRUE), 1), # mean Age with 1 decimal place
sd_age = round(sd(Age, na.rm = TRUE), 3)) %>% # sd Age with 3 decimal places
ungroup()
demo_by_gender
qrp_t1 <- data_prp %>%
#Step 1
select(Code, QRPs_1_Time1:QRPs_11_Time1) %>%
# Step 2
pivot_longer(cols = -Code, names_to = "Items", values_to = "Scores") %>%
# Step 3
group_by(Code) %>% # grouping py participant id
summarise(QRPs_Acceptance_Time1_mean = mean(Scores)) %>% # calculating the average Score
ungroup() # just make it a habit
qrp_step1 <- data_prp %>%
select(Code, QRPs_1_Time1:QRPs_11_Time1)
# show first 5 rows of qrp_step1
head(qrp_step1, n = 5)
renaming_col <- data_prp %>%
select(Participant_ID = Code)
View(renaming_col)
head(renaming_col, n = 5)
library(tidyverse)
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_raw)
dog_data_clean_long <- read_csv("dog_data_clean_long.csv")
dog_data_clean_long <- read_csv("data/dog_data_clean_long.csv")
View(dog_data_clean_long)
dog_data_long <- read_csv("data/dog_data_clean_long.csv")
rm(dog_data_clean_long)
View(dog_data_long)
dog_data_raw <- read_csv("dog_data_raw.csv")
dog_data_wide <- read_csv("data/dog_data_clean_wide.csv")
dog_data_raw <- read_csv("data/dog_data_raw.csv")
View(dog_data_wide)
View(dog_data_raw)
flourishing_brief <- dog_data_raw %>%
select(RID, F1_1:F1_8)
head(flourishing_brief, n = 5)
flourishing_tidy <- dog_data_raw %>%
select(RID, starts_with("F1")) %>%
pivot_longer(cols = -RID, names_to = "Names", values_to = "Response") %>%
group_by(RID) %>%
summarise(Flourishing_pre = mean(Response)) %>%
ungroup()
head(flourishing_tidy, n = 5)
data_flourishing <- dog_data_raw %>%
select(RID, F1_1:F1_8) %>%
pivot_longer(cols = -RID, names_to = "Questionnaire", values_to = "Responses")
View(data_flourishing)
