# Multiple regression {#sec-reg_mult}

Note to self: leave beta as b


## Intended Learning Outcomes {.unnumbered}

By the end of this chapter you should be able to:


## [Individual Walkthrough]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}

## Activity 1: Setup

* create a new project
* create a new Rmd file and save it to your project folder
* delete everything after the setup code chunk 



## Activity 2: Download the data

* Download the data: link
* Talk about the files
* insert citation and abstract of the data
* Look at the codebook and the variables


## Activity 3: Load in the library, read in the data and familiarise yourself with the data



```{r include=FALSE, message=TRUE}
## I basically have to have 2 code chunks since I tell them to put the data files next to the project, and mine are in a separate folder called data - unless I'll turn this into a fixed path
library(tidyverse)
library(performance)
library(pwr)
data_alter <- read_csv("data/Alter_2024_data.csv")
```


::: {.callout-caution collapse="true" icon="false"} 

## Solution 

```{r eval=FALSE}
library(tidyverse)
library(performance)
library(pwr)
data_alter <- read_csv("Alter_2024_data.csv")
```

:::



## Activity 3: Data Wrangling & Preparing the dataframe

Before we start with the regression model, let's wrangle the data a bit more. Most of the columns have already been tidied, but to have more informative categories within the demographic data, we would recommend relabeling the remaining two columns Gender and Student status according to the information in the codebook. Add `Gender_tidy` and `StuSta_tidy` to the `data_alter` object.


::: {.callout-note collapse="true" icon="false"} 

## Hints

* Gender would be a case of recoding one value as another (we did that for the `Understanding_OS questionnaire` in @sec-wrangling)
* Student Status would be slightly more intricate having multiple entries that would be recoded as the same category (we did that for the `SATs` questionnaire in @sec-wrangling)


::: {.callout-caution collapse="true" icon="false"} 

## Solution

```{r}
data_alter <- data_alter %>% 
  mutate(Gender_tidy = case_match(GenderE,
                                  1 ~ "Female",
                                  2 ~ "Male",
                                  3 ~ "Non-Binary",
                                  .default = NA),
         StuSta_tidy = case_when(
           StuStaE %in% c("1", "Freshman") ~ "Freshman",
           StuStaE %in% c("2", "Sophomore") ~ "Sophomore",
           StuStaE %in% c("3", "Junior") ~ "Junior",
           StuStaE %in% c("4", "senior", "Senior", "post-bac") ~ "Senior or Higher",
           .default = StuStaE))
```

:::

:::




```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_MA)) +
  stat_qq() +
  stat_qq_line()
```


```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_QANX)) +
  stat_qq() +
  stat_qq_line()
```


```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_QINFL)) +
  stat_qq() +
  stat_qq_line()
```


```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_QSF)) +
  stat_qq() +
  stat_qq_line()


ggplot(data_alter, aes(x = Mean_QSF)) +
  geom_histogram()
```


```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_QHIND)) +
  stat_qq() +
  stat_qq_line()

ggplot(data_alter, aes(x = Mean_QHIND)) +
  geom_histogram(binwidth = 0.1)
```


```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_QSC)) +
  stat_qq() +
  stat_qq_line()
```


```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_QSE)) +
  stat_qq() +
  stat_qq_line()


ggplot(data_alter, aes(x = Mean_QSE)) +
  geom_histogram(binwidth = 0.1)
```


```{r eval=FALSE}
ggplot(data_alter, aes(sample = Mean_SPSS)) +
  stat_qq() +
  stat_qq_line()
```


## [Pair-coding]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}




## [Test your knowledge]{style="color: #F39C12; text-transform: uppercase;"} {.unnumbered}


